<?php

/**
 * @file
 */

/**
 *
 */
function wisski_core_update_8001(&$sandbox) {

  $tables = ['wisski_entity_map', 'wisski_title_n_grams', 'wisski_calling_bundles', 'wisski_preview_images', 'wisski_entity_field_properties', 'wisski_core_ontology_namespaces'];

  foreach ($tables as $table) {
    $result = db_select($table, 't')->fields('t')->execute();
    file_put_contents('temporary://' . $table, "");
    while ($thing = $result->fetch()) {
      file_put_contents('temporary://' . $table, serialize($thing) . "\n", FILE_APPEND);
    }
  }

  drupal_uninstall_schema('wisski_core');
  drupal_install_schema('wisski_core');

  foreach ($tables as $table) {
    $file = fopen('temporary://' . $table, "r");
    if ($file) {
      while (($line = fgets($file)) !== FALSE) {
        $thing = unserialize($line);
        $thing = (array) $thing;
        db_insert($table)->fields($thing)->execute();
        // dpm($line);
      }
    }
    else {
      drupal_set_message("Could not open file " . $table, 'error');
    }
    fclose($file);
  }

}

/**
 * Add Wisski menu.
 */
function wisski_core_update_8002() {
  // Create a new menu item.
  $menu = \Drupal::entityTypeManager()->getStorage('menu');
  $menu->create([
    'id' => 'wisski',
    'label' => 'WissKI Menu',
    'description' => 'Links related to the WissKI module.',
    'langcode' => 'en',
    'locked' => TRUE,
    'dependencies' => ['enforced' => ['module' => ['wisski_core']]],
  ])->save();

}

/**
 * Implements hook_schema()
 */
function wisski_core_schema() {

  $schema['wisski_entity_map'] = [
    'description' => 'generates a serial number for those entity IDs which have a generated title',
    'fields' => [
      'num' => [
        'description' => 'the Serial Number for the generated title',
        'type' => 'serial',
        'size' => 'normal',
        'not null' => TRUE,
      ],
      'eid' => [
        'description' => 'the Entity ID',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ],
    ],
    'primary key' => ['num'],
  ];

  $schema['wisski_title_n_grams'] = [

    'description' => 'Stores n-grams of generated entity titles for search and index purposes',
    'fields' => [
      'ent_num' => [
        'description' => 'Entity Serial Number from wisski_entity_map',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ],
      'bundle' => [
        'description' => 'Bundle Name',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => 'default',
      ],
      'ngram' => [
        'description' => 'n-gram from the title',
        'type' => 'char',
        'length' => 128,
        'not null' => TRUE,
      ],
      'n' => [
        'description' => 'the length of the n-gram',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      ],
    ],
    'primary key' => ['ent_num', 'bundle', 'ngram'],
    'indexes' => [
      'ngrams' => ['ngram', 'n'],
      'entities' => ['ent_num', 'bundle'],
    ],
  ];

  $schema['wisski_calling_bundles'] = [

    'description' => 'Caches the calling bundle for individuals so that we can decide on the correct visualization',
    'fields' => [
      'eid' => [
        'description' => 'Entity ID',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ],
      'bid' => [
        'description' => 'bundle name / ID',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ],
    ],
    'indexes' => [
      'eid' => ['eid'],
      'bid' => [['bid', 64]],
    ],
  ];

  $schema['wisski_preview_images'] = [

    'description' => 'Caches the URI of the preview image for individuals',
    'fields' => [
      'eid' => [
        'description' => 'Entity ID',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ],
      'image_uri' => [
        'description' => 'image URI',
        'type' => 'varchar',
        'length' => 1023,
        'not null' => TRUE,
      ],
    ],
    'indexes' => [
      'eid' => ['eid'],
      'bid' => [['image_uri', 128]],
    ],
  ];

  $schema['wisski_entity_field_properties'] = [

    'description' => 'Saves secondary field data for WissKI Entities. This includes all the field properties that are set by the user',
    'fields' => [
      'eid' => [
        'description' => 'Entity ID',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ],
      'bid' => [
        'description' => 'bundle name / ID',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ],
      'fid' => [
        'description' => 'field name / ID',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ],
      'delta' => [
        'description' => 'field item weight',
        'type' => 'int',
      ],
      'ident' => [
        'description' => 'A string that identifies this field item, will mostly be the disamb/group URI',
        'type' => 'text',
        'length' => 1023,
        'not null' => TRUE,
      ],
      'properties' => [
        'description' => 'array of field properties',
        'type' => 'text',
        'serialize' => TRUE,
      ],
    ],
    'indexes' => [
      'eid' => ['eid'],
      'bid' => [['bid', 64]],
      'fid' => [['fid', 64]],
    ],
  ];

  $schema['wisski_core_ontology_namespaces'] = [

    'description' => 'Saves the namespaces on ontology load.',
    'fields' => [
      'short_name' => [
        'description' => 'Short name of the namespace.',
        'type' => 'varchar',
        'length' => 1023,
        'not null' => TRUE,
      ],
      'long_name' => [
        'description' => 'Full URI of the namespace.',
        'type' => 'text',
        'length' => 1023,
        'not null' => TRUE,
      ],
    ],
  ];

  // dpm($schema);
  return $schema;
}
