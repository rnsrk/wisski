<?php
// $Id$

function wisski_core_install() {
/*
  if (in_array('wisski_core', $modules)) {
    // Create a text field.
    if (!field_read_field('wisski_core_field_1')) {
      $field = array(
        'field_name' => 'wisski_core_field_1',
        'type' => 'text',
      );
      field_create_field($field);
    }

    // Attach created field to proper bundle.
    if (!field_read_instance('wisski_entity_data', 'wisski_core_field_1', 'wisski_core_bundle_1')) {
      field_attach_create_bundle('wisski_core_entity', 'wisski_core_bundle_1');
      $instance = array(
        'field_name' => 'wisski_core_field_1',
        'label' => t('Field 1 of wisski_core_bundle_1 bundle'),
        'entity_type' => 'wisski_core',
        'bundle' => 'wisski_core_bundle_1',
      );
      field_create_instance($instance);
    }
  }
*/
}

function wisski_core_uninstall() {
	
//	field_delete_field('wisski_core_field_1');
}

function wisski_core_schema() {
  $schema['wisski_pb_pathdata'] = array(
    'description' => 'The table that stores the path data.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,

        'description' => 'The id of the template.',
      ),
      
      'uuid' => array(
        'type' => 'char',
        'not null' => TRUE,
        'length' => 36,
        'description' => 'The uuid of the template.',
      ),

      'path_array' => array(
        'type' => 'text',
        'size' => 'big',

        'not null' => TRUE,
        'description' => 'The array for the path.',
      ),
      
      'datatype_property' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The uri of the selected datatype property.',
      ),
      
      'short_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The string for the short name displayed in the topic of the node.',
      ),
      
      'disamb' => array(
        'type' => 'int',

        'not null' => TRUE,
        'default' => 0,
        'description' => 'Mode for disambiguation',
      ),

      'group_id' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'The parent this item belongs to.',
      ),
      
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Weight of the path so the user can change the display.',
      ),
      
      'is_group' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'If it is a group = 1, if it is a path = 0',
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array('uuid' => array('uuid')),
  );

  $schema['wisski_pb_treedata'] = array(
    'description' => 'The table that stores the tree data for the pathbuilder trees.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,

        'description' => 'The id of the template.',
      ),
      
      'uuid' => array(
        'type' => 'char',
        'not null' => TRUE,
        'length' => 36,
        'description' => 'The uuid of the template.',
      ),
		
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The name of the path of the template.',
      ),
      
      'description' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,

        'description' => 'A long description for the user.',
      ),
      
      'group_id' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'The parent this item belongs to.',
      ),
      
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Weight of the path so the user can change the display.',
      ),
      
      'is_group' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'If it is a group = 1, if it is a path = 0',
      ),

      'fieldtype' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'textfield',
        'description' => 'What kind of element should be used for display?',
      ),
      
      'enabled' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Enabled = 1, disabled = 0',
      ),
      
      'mandatory' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'mandatory means that this property must be filled if this field has the value "1"',
      ),
      
      'repeatable' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'repeatable means that this property may be filled several times.',
      ),
      
      'type' => array(
        'type' => 'varchar',
	'length' => 255,
        'not null' => TRUE,
        'default' => 'internal',
        'description' => 'type of the path, wisski-interna: 2, import: 3, export: 5',
      ),
      
      'displaytype' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => 'block',
        'description' => 'select the type of display for css',
      ),

      'fieldsize' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 60,
        'description' => 'the size of the field.',
      ),

      'clearbutton' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'should the clearbutton be available?',
      ),

      'deletebutton' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'should the deduplicate be available?',
      ),

    ),
    'primary key' => array('id'),
    'unique keys' => array('uuid' => array('uuid')),
  );

  // Table for storing data of entities.
  $schema['wisski_entity_data'] = array(
    'description' => 'The base table for wisski entity data.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'Entity bundle.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'Machine readable name for the entity',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'Entity title.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'Entity description.',
        'type' => 'text',
      ),
    ),
    'primary key' => array('id'),
  );

  // Table for storing data of entity exportable bundles.
  $schema['wisski_entity_bundles'] = array(
    'description' => 'The base table for bundles of wisski entities',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'Bundle machine name.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'Human-readable name of bundle.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'A brief description of bundle.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
    ) + entity_exportable_schema_fields(),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );


  return $schema;
}