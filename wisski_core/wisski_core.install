<?php

function wisski_core_update_8001(&$sandbox) {

  $tables = array('wisski_entity_map', 'wisski_title_n_grams', 'wisski_calling_bundles', 'wisski_preview_images', 'wisski_entity_field_properties', 'wisski_core_ontology_namespaces');

  foreach($tables as $table) {
    $result = db_select($table, 't')->fields('t')->execute();
    file_put_contents('temporary://' . $table, "");
    while($thing = $result->fetch()) {
      file_put_contents('temporary://' . $table, serialize($thing) . "\n", FILE_APPEND);
    }
  }

  drupal_uninstall_schema('wisski_core');
  drupal_install_schema('wisski_core');

  foreach($tables as $table) {
    $file = fopen('temporary://' . $table, "r");
    if ($file) {
      while (($line = fgets($file)) !== false) {
	$thing = unserialize($line);
	$thing = (array)$thing;
        db_insert($table)->fields($thing)->execute();
#	dpm($line);
      }
    } else {
      drupal_set_message("Could not open file " . $table, 'error');
    } 
    fclose($file);
  }
  
}

/**
 * Add Wisski menu
 */
function wisski_core_update_8002() {
  // Create a new menu item.
  $menu = \Drupal::entityTypeManager()->getStorage('menu');
  $menu->create([
    'id' => 'wisski',
    'label' => 'WissKI Menu',
    'description' => 'Links related to the WissKI module.',
    'langcode' => 'en',
    'locked' => true,
    'dependencies' => [ 'enforced' => [ 'module' => [ 'wisski_core' ] ] ],
  ])->save();

}




/**
 * implements hook_schema()
 */
function wisski_core_schema() {

  $schema['wisski_entity_map'] = array(
    'description' => 'generates a serial number for those entity IDs which have a generated title',
    'fields' => array(
      'num' => array(
        'description' => 'the Serial Number for the generated title',
        'type' => 'serial',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'eid' => array(
        'description' => 'the Entity ID',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('num'),
  );

  $schema['wisski_title_n_grams'] = array(
    
    'description' => 'Stores n-grams of generated entity titles for search and index purposes',
    'fields' => array(
      'ent_num' => array(
        'description' => 'Entity Serial Number from wisski_entity_map',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'bundle' => array(
        'description' => 'Bundle Name',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => 'default',
      ),
      'ngram' => array(
        'description' => 'n-gram from the title',
        'type' => 'char',
        'length' => 128,
        'not null' => TRUE,
      ),
      'n' => array(
        'description' => 'the length of the n-gram',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('ent_num','bundle','ngram'),
    'indexes' => array(
      'ngrams' => array('ngram','n'),
      'entities' => array('ent_num','bundle'),
    ),
  );
  
  $schema['wisski_calling_bundles'] = array(
    
    'description' => 'Caches the calling bundle for individuals so that we can decide on the correct visualization',
    'fields' => array(
      'eid' => array(
        'description' => 'Entity ID',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'bid' => array(
        'description' => 'bundle name / ID',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'eid' => array('eid'),
      'bid' => array(array('bid',64)),
    ),
  );
  
  $schema['wisski_preview_images'] = array(
    
    'description' => 'Caches the URI of the preview image for individuals',
    'fields' => array(
      'eid' => array(
        'description' => 'Entity ID',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'image_uri' => array(
        'description' => 'image URI',
        'type' => 'varchar',
        'length' => 1023,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'eid' => array('eid'),
      'bid' => array(array('image_uri',128)),
    ),
  );
  
  $schema['wisski_entity_field_properties'] = array(
  
    'description' => 'Saves secondary field data for WissKI Entities. This includes all the field properties that are set by the user',
    'fields' => array(
      'eid' => array(
        'description' => 'Entity ID',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'bid' => array(
        'description' => 'bundle name / ID',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'fid' => array(
        'description' => 'field name / ID',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'delta' => array(
        'description' => 'field item weight',
        'type' => 'int',
      ),
      'ident' => array(
        'description' => 'A string that identifies this field item, will mostly be the disamb/group URI',
        'type' => 'text',
        'length' => 1023,
        'not null' => TRUE,
      ),
      'properties' => array(
        'description' => 'array of field properties',
        'type' => 'text',
        'serialize' => TRUE,
      ),
    ),
    'indexes' => array(
      'eid' => array('eid'),
      'bid' => array(array('bid',64)),
      'fid' => array(array('fid',64)),
    ),
  );

  $schema['wisski_core_ontology_namespaces'] = array(
  
    'description' => 'Saves the namespaces on ontology load.',
    'fields' => array(
      'short_name' => array(
        'description' => 'Short name of the namespace.',
        'type' => 'varchar',
        'length' => 1023,
        'not null' => TRUE,
      ),
      'long_name' => array(
        'description' => 'Full URI of the namespace.',
        'type' => 'text',
        'length' => 1023,
        'not null' => TRUE,
      ),
    ),
  );
  
  //dpm($schema);
  return $schema;
}
