<?php
// $ID$

//include "wisski_core.filler.inc";

/**
* Basic module for the WissKI-Communication with Drupal 7
* Provides the Pathbuilder Interface
* Handles Basic mappings
*
*
* @author: Mark Fichtner, Martin Scholz
* @TODO: Fill in all permissions for this module!
*/

function wisski_core_permission() {
  
  return array(
  
    'administer wisski' => array(
      'title' => t('Administer WissKI Core modules'),
      'restrict access' => TRUE,
    ),
    'view wisski content' => array(
      'title' => t('View WissKI Entities'),
      'restrict access' => FALSE,
    ),
    'administer wisski paths' => array(
      'title' => t('Administer paths and fields for WissKI entities'),
      'restricted access' => TRUE,
    ),
  );
  
}

/************************ Entity Section ***********************/

/**
 * Implements hook_entity_info().
 */
function wisski_core_entity_info() {
  
  // defines a wisski_core_entity entity
  $info = array(
    'wisski_core_entity' => array(
      // it is called WissKI Entity
      'label' => t('WissKI Entity'),
      
      // it currently has a base table - future: triple store?
      'base table' => 'wisski_entity_data',
      
      // the entity main keys in this base table
      'entity keys' => array(
        'id' => 'id',
        'bundle' => 'type',
        'uri' => 'uri',
      ),
      
      // the keys which refer to bundles
      'bundle keys' => array(
        'bundle' => 'type',
      ),

      // we don't provide bundles statically but dynamically
      'bundles' => array(),
      
      // Definitions of entity and controller custom classes are placed in a
      // special file.
      // @see .controller.inc
      'entity class' => 'WisskiCoreEntity',
      'controller class' => 'WisskiCoreEntityController',
      // I have no idea what this does
      'metadata controller class' => '',
      
      // we want it fieldable
      'fieldable' => TRUE,
      // This line must be specified for using entity_uri() function.
      'uri callback' => 'entity_class_uri',
      // This line must be specified for using entity_label() function.
      'label callback' => 'entity_class_label',
      // for obvious reasons
      'module' => 'wisski_core'
    ),
  );
  
  // define a bundle - used as a template currently
  $info['wisski_core_bundle'] = array(
    'label' => t('wisski_core_bundle'),
    'base table' => 'wisski_entity_bundles',
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'uri' => 'uri',
      'label' => 'label',
    ),
    // what is in this bundle?
    'bundle of' => 'wisski_core_entity',
    'entity class' => 'WisskiCoreBundle',
    'controller class' => 'WisskiCoreBundleController',
    'metadata controller class' => '',
    'fieldable' => FALSE,
    'exportable' => TRUE,
    'module' => 'wisski_core',
    // Automatically create page for managing entity bundles.
    'admin ui' => array(
      'path' => 'admin/structure/wisski_core_bundle',
      'file' => 'wisski_core.admin.inc',
      'controller class' => 'WisskiCoreBundleUiController',
    ),
    // Access callback is necessary for admin UI.
    // @see http://drupal.org/node/1021576
    'access callback' => 'wisski_core_bundle_access',
  );
  
  return $info;
}

/**
 * Implements hook_entity_property_info().
 * These are from the typical examples currently - perhaps we don't need these.
 * They are stored in the database - see .install
 */
function wisski_core_entity_property_info() {
  $info = array();
  $properties = &$info['wisski_core_entity']['properties'];
  $properties['id'] = array(
    'type' => 'integer',
    'schema field' => 'id',
    'label' => t('WissKI Entity ID'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['type'] = array(
    'type' => 'text',
    'schema field' => 'type',
    'required' => TRUE,
    'label' => t('WissKI Entity type (bundle)'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['title'] = array(
    'type' => 'text',
    'schema field' => 'title',
    'required' => TRUE,
    'label' => t('WissKI Entity title'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['description'] = array(
    'type' => 'text',
    'schema field' => 'description',
    'label' => t('WissKI Entitiy description'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['same_individuals'] = array(
    'type' => 'list<text>',
    'schema field' => 'same_individuals',
    'label' => t('WissKI Entity same individuals'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  
  $type_properties = &$info['wisski_core_bundle']['properties'];
  $type_properties['id'] = array(
    'type' => 'integer',
    'schema field' => 'id',
    'label' => t('Type ID'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $type_properties['type'] = array(
    'type' => 'text',
    'schema field' => 'type',
    'required' => TRUE,
    'label' => t('Type name'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $type_properties['label'] = array(
    'type' => 'text',
    'schema field' => 'label',
    'required' => TRUE,
    'label' => t('Type label'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $type_properties['description'] = array(
    'type' => 'text',
    'schema field' => 'description',
    'required' => TRUE,
    'label' => t('Type description'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  
  return $info;
}

function wisski_core_entity_info_alter(&$entity_info) {
  foreach (wisski_core_bundle_load_multiple() as $type => $info) {
    $entity_info['wisski_core_entity']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/wisski_core_bundle/manage/%wisski_core_bundle',
        'real path' => 'admin/structure/wisski_core_bundle/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer wisski'),
      ),
    );
  }
}

/**
 * Implements hook_menu().
 * 
 * Describe pages for viewing and managing entities.
 */
function wisski_core_menu() {
  $items = array();
  
  
  /********** Entity Stuff ***************/

  // Base URI for dealing with entity.
  $base_uri = 'wisski_core/%wisski_core';
  $base_uri_argument_position = 1;

  // URI for viewing list of existing entities.

  
  $items['wisski/navigate'] = array(
    'title' => 'WissKI Navigate Entities',
    'page callback' => 'wisski_core_list_bundles',
    'access arguments' => array('view wisski content'),
    'file' => 'wisski_core.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/structure/wisski_core_bundle/manage/%wisski_core_bundle/edit_paths'] = array(
    'title' => 'Edit Paths',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_core_edit_bundle_paths',4),
    'access arguments' => array('administer wisski paths'),
    'access callback' => TRUE,
    'file' => 'wisski_core.pathbuilder.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
    
  $items['admin/structure/wisski_core_bundle/manage/%wisski_core_bundle/field_paths'] = array(
    'title' => 'Manage Paths',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_core_field_paths',4),
    'access arguments' => array('administer wisski paths'),
    'access callback' => TRUE,
    'file' => 'wisski_core.pathbuilder.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );
  
  $entity_info = entity_get_info('wisski_core_entity');
  foreach ($entity_info['bundles'] as $bundle_name => $bundle_data) {

    $items['wisski/navigate/'.$bundle_name.'/edit_bundle'] = array(
      'title' => 'Edit Paths',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_core_edit_bundle_paths',2),
      'access arguments' => array('administer wisski paths'),
      'access callback' => TRUE,
      'file' => 'wisski_core.pathbuilder.inc',
      'type' => MENU_LOCAL_TASK,
    );
    
    
  
    $items['wisski/navigate/'.$bundle_name."/list"] = array(
      'title' => 'List',
      'page callback' => 'wisski_core_list',
      'page arguments' => array(2),
      'access arguments' => array('view wisski content'),
      'file' => 'wisski_core.pages.inc',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -1000,
    );

    $items['wisski/navigate/' . $bundle_name] = array(
      'title' => 'View ' . $bundle_name,
      'page callback' => 'wisski_core_list',
      'page arguments' => array(2),
      'access arguments' => array('view wisski content'),
      'file' => 'wisski_core.pages.inc',
      //'type' => MENU_NORMAL_ITEM,
    );

  }


  // URI for choosing bundle of entity to add.
  $items['wisski/create'] = array(
    'title' => 'Add WissKI Entity',
    'page callback' => 'wisski_core_choose_bundle',
    'access arguments' => array('administer wisski'),
    'file' => 'wisski_core.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // URI for adding entity of proper bundle.
  $entity_info = entity_get_info('wisski_core_entity');
  foreach ($entity_info['bundles'] as $bundle_name => $bundle_data) {
    $items['wisski/create/' . $bundle_name] = array(
      'title' => 'Add ' . $bundle_name,
      'page callback' => 'wisski_core_entity_add',
      'page arguments' => array(2),
      'access arguments' => array('administer wisski'),
      'file' => 'wisski_core.admin.inc',
    );
  }

  // URI for viewing entity instances.
  $items[$base_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('wisski_core', $base_uri_argument_position),
    'page callback' => 'wisski_core_entity_view',
    'page arguments' => array($base_uri_argument_position),
    'access arguments' => array('view wisski content'),
    'file' => 'wisski_core.pages.inc',
  );
  $items[$base_uri . '/view'] = array(
    'title' => 'View Entity',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // URI for editing entity instances.
  $items[$base_uri . '/edit'] = array(
    'title' => 'Edit Entity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_core_entity_form', $base_uri_argument_position),
    'access arguments' => array('administer wisski'),
    'file' => 'wisski_core.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  // URI for deleting entity instances.
  $items[$base_uri . '/delete'] = array(
    'title' => 'Delete Entity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_core_entity_form_delete', $base_uri_argument_position),
    'access arguments' => array('administer wisski'),
    'file' => 'wisski_core.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/structure/wisski_core_bundle/%wisski_core_bundle/delete'] = array(
    'title' => 'Delete WissKI Core Bundle',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_core_bundle_form_delete_confirm', 4),
    'access arguments' => array('administer wisski'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'wisski_core.admin.inc',
  );

  $items['admin/structure/wisski_core_bundle/%wisski_core_bundle/paths'] = array(
    'title' => 'WissKI Core Bundle Paths',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_core_pathbuilder_form', 3),
    'access arguments' => array('administer wisski'),
    //'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'wisski_core.admin.inc',
  );

  /********* PB Stuff *************/
  $items['admin/config/wisski/pathbuilder'] = array(
      'title' => 'Pathbuilder',
      'description' => 'Manage semantically annotated fields',
      'type' => MENU_NORMAL_ITEM,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_core_pb_all_paths'),
      'file' => 'wisski_core.pathbuilder.inc',
      'access arguments' => array('administer wisski'),
  );


  $items['admin/config/wisski'] = array(
    'title' => 'WissKI',
    'type' => MENU_NORMAL_ITEM,
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer wisski'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
/*  
  $items['admin/config/wisski/pathbuilder'] = array(
    'title' => t('Pathbuilder'),
    'description' => t('Manage the core functionality'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_core_config_page'),
    'access arguments' => array('administer wisski'),
    //'page arguments' => array('wisski_pathbuilder_overview_form', 'Pathbuilder'),
    //'access arguments' => array('wisski administrate page'),
    'type' => MENU_NORMAL_ITEM,
    //'file' => 'wisski_pathbuilder.inc',
    'weight' => 2,
  );
  */
  $trees = wisski_core_get_pb_trees();
    
  foreach($trees as $key => $treeinfo) {
    $items['admin/config/wisski_core/pathbuilder/'.$key] = array(
      'title' => t($treeinfo['title']),
      'page callback' => 'drupal_get_form',
//      'page arguments' => array('wisski_core_config_page'),
      'access arguments' => array('administer wisski'),
      'page arguments' => array('wisski_core_pathbuilder_overview_form', $key),
//      'access arguments' => array('wisski administrate page'),
      'type' => MENU_LOCAL_TASK,
//      'file' => 'wisski_pathbuilder.inc',
      'weight' => 2,
    );
    
    $items['admin/config/wisski_core/pathbuilder/'.$key.'/add_group'] = array(
      'title' => t('Add group to ' . $treeinfo['title']),
      'page callback' => 'drupal_get_form',
//      'page arguments' => array('wisski_core_config_page'),
      'access arguments' => array('administer wisski'),
      'page arguments' => array('wisski_core_pathbuilder_add_group_form', $key),
//      'access arguments' => array('wisski administrate page'),
      'type' => MENU_LOCAL_TASK,
//      'file' => 'wisski_pathbuilder.inc',
      'weight' => 2,
    );
    
    $items['admin/config/wisski_core/pathbuilder/'.$key.'/add_field'] = array(
      'title' => t('Add field to ' . $treeinfo['title']),
      'page callback' => 'drupal_get_form',
//      'page arguments' => array('wisski_core_config_page'),
      'access arguments' => array('administer wisski'),
      'page arguments' => array('wisski_core_pathbuilder_add_field_form', $key),
//      'access arguments' => array('wisski administrate page'),
      'type' => MENU_LOCAL_TASK,
//      'file' => 'wisski_pathbuilder.inc',
      'weight' => 2,
    );
    
    
    
    
    //if($key == "internal")
    //  $items['admin/config/wisski_core/pathbuilder/'.$key.'/']['type'] = MENU_DEFAULT_LOCAL_TASK;
                                                                
  }
  
  
  $classes = db_query("SELECT * FROM {wisski_pb_treedata} WHERE `group_id` = -1 AND `is_group` = 1 ORDER BY weight ASC");

  foreach($classes as $class) {
    $items['node/add/' . $class->id] = array(
      'title' => t('Add a ' . $class->name),
      'page callback' => 'drupal_get_form',
//      'page arguments' => array('wisski_core_config_page'),
      'access arguments' => array('administer wisski'),
      'page arguments' => array('wisski_core_pathbuilder_add_individual', $class),
//      'access arguments' => array('wisski administrate page'),
      'type' => MENU_LOCAL_TASK,
//      'file' => 'wisski_pathbuilder.inc',
      'weight' => 2,
    );

  }  


  return $items;
}


function wisski_core_make_uri($entity) {
  
  $tag = md5($entity->title.time());
  $short = preg_replace('/[^a-zA-Z0-9_]/','_',substr($entity->title,0,8));
  return "ecrm:ind_".$short.$tag;
}

/**
 * Load an instance of wisski_core.
 * 
 * @param int $teid
 *   Entity identifier.
 * @param bool $reset
 *   Whether to reset the internal cache for wisski_core.
 * 
 * @return mixed
 *   An actual entity, or false.
 */
function wisski_core_load($teid, $reset = FALSE) {
  $entities = wisski_core_entity_load_multiple(array($teid), array(), $reset);
  return reset($entities);
}

/**
 * Load multiple instances of wisski_core.
 * 
 * @see entity_load()
 * 
 * @param array $teids
 *   Entity identifiers.
 * @param array $conditions
 *   (deprecated) An associative array of conditions on the base entity table.
 * @param bool $reset
 *   Whether to reset the internal cache for wisski_core.
 * 
 * @return array
 *   Founded entities.
 */
function wisski_core_entity_load_multiple($teids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('wisski_core_entity', $teids, $conditions, $reset);
}


function wisski_core_bundle_load($entity_type) {
  return wisski_core_bundle_load_multiple($entity_type);
}

function wisski_core_bundle_load_multiple($type_name = NULL) {
  $types = entity_load_multiple_by_name('wisski_core_bundle', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

function wisski_core_bundle_access($op, $entity = NULL) {
  return user_access('view wisski content');
}
  


/***************** Pathbuilder Section *********************

/*
function wisski_core_menu() {

  $items['admin/config/wisski_core/pathbuilder'] = array(
    'title' => t('Pathbuilder'),
    'description' => t('Manage the core functionality'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_core_config_page'),
    'access arguments' => array('administer wisski'),
    //'page arguments' => array('wisski_pathbuilder_overview_form', 'Pathbuilder'),
    //'access arguments' => array('wisski administrate page'),
    'type' => MENU_NORMAL_ITEM,
    //'file' => 'wisski_pathbuilder.inc',
    'weight' => 2,
  );
  
  $trees = wisski_core_get_pb_trees();
    
  foreach($trees as $key => $treeinfo) {
    $items['admin/config/wisski_core/pathbuilder/'.$key] = array(
      'title' => t($treeinfo['title']),
      'page callback' => 'drupal_get_form',
//      'page arguments' => array('wisski_core_config_page'),
      'access arguments' => array('administer wisski'),
      'page arguments' => array('wisski_core_pathbuilder_overview_form', $key),
//      'access arguments' => array('wisski administrate page'),
      'type' => MENU_LOCAL_TASK,
//      'file' => 'wisski_pathbuilder.inc',
      'weight' => 2,
    );
    
    $items['admin/config/wisski_core/pathbuilder/'.$key.'/add_group'] = array(
      'title' => t('Add group to ' . $treeinfo['title']),
      'page callback' => 'drupal_get_form',
//      'page arguments' => array('wisski_core_config_page'),
      'access arguments' => array('administer wisski'),
      'page arguments' => array('wisski_core_pathbuilder_add_group_form', $key),
//      'access arguments' => array('wisski administrate page'),
      'type' => MENU_LOCAL_TASK,
//      'file' => 'wisski_pathbuilder.inc',
      'weight' => 2,
    );
    
    $items['admin/config/wisski_core/pathbuilder/'.$key.'/add_field'] = array(
      'title' => t('Add field to ' . $treeinfo['title']),
      'page callback' => 'drupal_get_form',
//      'page arguments' => array('wisski_core_config_page'),
      'access arguments' => array('administer wisski'),
      'page arguments' => array('wisski_core_pathbuilder_add_field_form', $key),
//      'access arguments' => array('wisski administrate page'),
      'type' => MENU_LOCAL_TASK,
//      'file' => 'wisski_pathbuilder.inc',
      'weight' => 2,
    );
    
    
    
    
    //if($key == "internal")
    //  $items['admin/config/wisski_core/pathbuilder/'.$key.'/']['type'] = MENU_DEFAULT_LOCAL_TASK;
                                                                
  }
  
  
  $classes = db_query("SELECT * FROM {wisski_pb_treedata} WHERE `group_id` = -1 AND `is_group` = 1 ORDER BY weight ASC");

  foreach($classes as $class) {
    $items['node/add/' . $class->id] = array(
      'title' => t('Add a ' . $class->name),
      'page callback' => 'drupal_get_form',
//      'page arguments' => array('wisski_core_config_page'),
      'access arguments' => array('administer wisski'),
      'page arguments' => array('wisski_core_pathbuilder_add_individual', $class),
//      'access arguments' => array('wisski administrate page'),
      'type' => MENU_LOCAL_TASK,
//      'file' => 'wisski_pathbuilder.inc',
      'weight' => 2,
    );

  }  
  
  
  return $items;
}
*/

/*
function wisski_core_pathbuilder_add_individual($form, &$form_state, $classobj) {
  $arr = _wisski_core_pathbuilder_recursive_add_group($form, $form_state, $classobj);
  drupal_set_message("arr: " . serialize($arr));

  return $arr;


}

function _wisski_core_pathbuilder_recursive_add_group($form, &$form_state, $groupobj) {

  $outarr = array();

//  $outarr[] = "ich bin eine gruppe";

  $fields = db_query("SELECT * FROM {wisski_pb_treedata} WHERE `group_id` = '" . $groupobj->id . "' ORDER BY weight ASC");

  foreach($fields as $fieldorgroup) {
    if($fieldorgroup->is_group == 1) {
      $outarr = array_merge($outarr, _wisski_core_pathbuilder_recursive_add_group($form, $form_state, $fieldorgroup));
    } else {
      $outarr = array_merge($outarr, _wisski_core_pathbuilder_recursive_add_field($form, $form_state, $fieldorgroup));
    }
  }

  return $outarr;

}

function _wisski_core_pathbuilder_recursive_add_field($form, &$form_state, $fieldobj) {

  $form = array();
  $form[$fieldobj->id] =  array('#type' => 'image', '#title' => $fieldobj->name);

  return $form;

}
*/

function wisski_core_config_page() {
  $form['test'] = array(
    '#type' => 'textfield',
    '#title' => 'test',
  );
  
  $trees = wisski_core_get_pb_trees();

  foreach($trees as $key => $treeinfo) {
    $form['stores'] = array(
      '#markup' => serialize($trees),
    );

  }
  
  return $form;
  
}

function _wisski_core_pathbuilder_get_data($type = "internal") {

  $itemtree = array();
  
  $depth = -1;
  

  $itemtree[0] = _wisski_core_pathbuilder_get_ungrouped();
  
  _wisski_core_pathbuilder_recursive_get_data($itemtree[0], $type, $itemtree, $depth);

  $rootnodes = db_query("SELECT * FROM {wisski_pb_treedata} WHERE `group_id` = -1 AND `type` LIKE '%$type%' ORDER BY weight ASC");

//  drupal_set_message(serialize($rootnodes));
    
  foreach($rootnodes as $parent) {
  //  drupal_set_message(serialize($itemtree));
    _wisski_core_pathbuilder_recursive_get_data($parent, $type, $itemtree, $depth);
  }
  
  return $itemtree;

}

function _wisski_core_pathbuilder_recursive_get_data($parentitem, $type = 'internal', &$itemtree = array(), &$depth = 0) {
  $depth++;
  
  $parentitem->depth = $depth;
  
  $itemtree[$parentitem->id] = $parentitem;
  
  $children = db_query("SELECT * FROM {wisski_pb_treedata} WHERE `group_id` = " . $parentitem->id . " AND `type` LIKE '%$type%' ORDER BY weight ASC");
  
  foreach ($children as $child) {
    if (!in_array($child->id, array_keys($itemtree))) {
     _wisski_core_pathbuilder_recursive_get_data($child, $type, $itemtree, $depth);
    }
  }
  $depth--;
  
}

function _wisski_core_pathbuilder_get_ungrouped() {
  //$item = array();
  
  $item = new stdclass();
  
  $item->name = "Ungrouped";
  $item->id = 0;
  $item->pid = -1;
  $item->is_group = 1;
  $item->group_id = -1;
  $item->enabled = 0;
  $item->weight = -1000;

  return $item;
}


function _wisski_core_pathbuilder_make_form($type = "internal") {
  static $form = array('#tree' => TRUE);

  $result = _wisski_core_pathbuilder_get_data($type);

  foreach($result as $one_field) {

    $item = array(
      'name' => array(
        '#markup' => check_plain(t($one_field->name)),
      ),
      'id' => array(
        '#type' => 'hidden',
        '#default_value' => $one_field->id,
      ),
      'pid' => array(
        '#type' => 'hidden',
        '#default_value' => $one_field->group_id,
      ),
      'weight' => array(
        '#type' => 'weight',
        '#title' => t('weight'),
        '#delta' => 50,
        '#default_value' => $one_field->weight,
        '#title_display' => 'invisible',
      ),
      'enabled' => array(
        '#type' => 'checkbox',
        '#title' => 'enabled',
        '#title_display' => 'invisible',
        '#default_value' => $one_field->enabled,
      ),
      'depth' => array(
        '#type' => 'hidden',
        '#value' => $one_field->depth,
      ),
      'group' => array(
        '#type' => 'hidden',
        '#value' => $one_field->is_group,
      ),
      
      'type' => array(
        '#markup' => (empty($one_field->is_group) ? t('Field') : t('Group')),
      ),
    );
    
    $form['wisski_core_pathbuilder_show'][$one_field->id] = $item;
  }
 
 // _wisski_core_pathbuilder_make_recursive_form($form, $type);

  return $form;
}

function wisski_core_theme() {
  return array(
    'wisski_core_pathbuilder_overview_form' => array(
      'render element' => 'form',
    ),
  );

}


function wisski_core_pathbuilder_overview_form_submit($form, $form_state) {
  $items = $form_state['values']['wisski_core_pathbuilder_show'];
  
  //drupal_set_message(serialize($form_state));
  
  foreach($items as $item) {
    db_update('wisski_pb_treedata')
    ->fields(array(
      'enabled' => $item['enabled'],
      'group_id' => $item['pid'],
      'weight' => $item['weight'],
    ))
    ->condition('id', $item['id'], "=")
    ->execute();
  }
}

function theme_wisski_core_pathbuilder_overview_form($variables) {
  $form = $variables['form'];
  
  // Initialize the variable which will store our table rows.
  $rows = array();
      
  // Iterate over each element in our $form['example_items'] array.
  foreach (element_children($form['wisski_core_pathbuilder_show']) as $id) {
  
    $form['wisski_core_pathbuilder_show'][$id]['weight']['#attributes']['class'] = array('wki-weight');
    $form['wisski_core_pathbuilder_show'][$id]['id']['#attributes']['class'] = array('wki-id');
    $form['wisski_core_pathbuilder_show'][$id]['pid']['#attributes']['class'] = array('wki-pid');                       

    $class = array('draggable');

    if($form['wisski_core_pathbuilder_show'][$id]['group']['#value'] == 0) {
      $class[] = 'tabledrag-leaf';
    } else if($form['wisski_core_pathbuilder_show'][$id]['id']['#value'] == 0) {
      $class[] = 'tabledrag-root';
    }
    
    $indent = theme('indentation', array('size' => $form['wisski_core_pathbuilder_show'][$id]['depth']['#value']));
    unset($form['example_items'][$id]['depth']);

    $rows[] = array(
      'data' => array(

        // Add our 'name' column.
        $indent . drupal_render($form['wisski_core_pathbuilder_show'][$id]['name']),
        
        drupal_render($form['wisski_core_pathbuilder_show'][$id]['type']),
         
        // Add our 'description' column.
        drupal_render($form['wisski_core_pathbuilder_show'][$id]['enabled']),
                                          
        // Add our 'weight' column.
        drupal_render($form['wisski_core_pathbuilder_show'][$id]['weight']),
      
        // Add our hidden 'id' column.
        drupal_render($form['wisski_core_pathbuilder_show'][$id]['id']),

        // Add our hidden 'parent id' column.
        drupal_render($form['wisski_core_pathbuilder_show'][$id]['pid']),
      
      ),
      
    // To support the tabledrag behaviour, we need to assign each row of the
    // table a class attribute of 'draggable'. This will add the 'draggable'
    // class to the <tr> element for that row when the final table is
    // rendered.
      'class' => $class,
    );
 //   drupal_set_message(serialize($form['wisski_core_pathbuilder_show'][$id]['weight']));
  }
  
  $header = array(t('Name'), t('Type'), t('Enabled'), t('Weight'), t('ID'), t('PID'));
  $table_id = 'wisski_core_pathbuilder_table';
  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $table_id),
  ));
  
  $output .= drupal_render_children($form);
  drupal_add_tabledrag($table_id, 'match', 'parent', 'wki-pid', 'wki-pid', 'wki-id', TRUE);

  drupal_add_tabledrag($table_id, 'order', 'sibling', 'wki-weight', NULL, NULL);
   
  return $output;
} 

function wisski_core_pathbuilder_add_group_form($form_state, $type) {
  $form['item'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add group'),
    '#collapsible' => FALSE,
    '#tree' => TRUE,
    '#weight' => -2,
  );
  
  $form['item']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Group name'),
    '#default_value' => isset($form_state['storage']['name']) ? $form_state['storage']['name'] : '',
    '#description' => t(''),
  );
  
  $form['item']['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#default_value' => isset($form_state['storage']['name']) ? $form_state['storage']['name'] : '',
    '#description' => t(''),
  );
  
  $form['item']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enabled'),
    '#default_value' => isset($form_state['storage']['name']) ? $form_state['storage']['name'] : '',
    '#description' => t(''),
  );
  
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  
  return $form;
}

function wisski_core_pathbuilder_add_group_form_submit($form, &$form_state) {
  $type = "internal";
  if(arg(4))
    $type = arg(4);

//  drupal_set_message(serialize($form_state['values']));
    
  db_insert('wisski_pb_treedata')
    ->fields(array(
      'name' => $form_state['values']['item']['name'],
      'description' => $form_state['values']['item']['description'],
      'enabled' => $form_state['values']['item']['enabled'],
      'uuid' => uniqid(),
      'is_group' => 1,
      'group_id' => 0,
      'weight' => 0,
      'type' => $type,
    ))
    ->execute();

  $form_state['redirect'] = 'admin/config/wisski_core/pathbuilder/' . $type;
}

function wisski_core_pathbuilder_add_group($form, &$form_state) {
  $type = "internal";
  
  if(arg(4))
    $type = arg(4);
  
  $form_state['redirect'] = 'admin/config/wisski_core/pathbuilder/' . $type . '/add_group';               
  
}

function wisski_core_pathbuilder_add_field_form($form_state, $type) {
  $form['item'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add field'),
    '#collapsible' => FALSE,
    '#tree' => TRUE,
    '#weight' => -2,
  );
  
  $form['item']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Field name'),
    '#default_value' => isset($form_state['storage']['name']) ? $form_state['storage']['name'] : '',
    '#description' => t(''),
  );
  
  $form['item']['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#default_value' => isset($form_state['storage']['name']) ? $form_state['storage']['name'] : '',
    '#description' => t(''),
  );
  
  $form['item']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enabled'),
    '#default_value' => isset($form_state['storage']['name']) ? $form_state['storage']['name'] : '',
    '#description' => t(''),
  );
  
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  
  return $form;
}

function wisski_core_pathbuilder_add_field_form_submit($form, &$form_state) {
  $type = "internal";
  if(arg(4))
    $type = arg(4);

//  drupal_set_message(serialize($form_state['values']));
    
  db_insert('wisski_pb_treedata')
    ->fields(array(
      'name' => $form_state['values']['item']['name'],
      'description' => $form_state['values']['item']['description'],
      'enabled' => $form_state['values']['item']['enabled'],
      'uuid' => uniqid(),
      'is_group' => 0,
      'group_id' => 0,
      'weight' => 0,
      'type' => $type,
    ))
    ->execute();
  $form_state['redirect'] = 'admin/config/wisski_core/pathbuilder/' . $type;
    
}

function wisski_core_pathbuilder_add_field($form, &$form_state) {
  $type = "internal";
  
  if(arg(4))
    $type = arg(4);
  
  $form_state['redirect'] = 'admin/config/wisski_core/pathbuilder/' . $type . '/add_field';               
  
}

  /**
   * Form for editing an entire menu tree at once.
   *
   * Shows for one menu the menu items accessible to the current user and
   * relevant operations.
   */

  function wisski_core_pathbuilder_overview_form($form_state, $menu, $type = "internal") {

    global $menu_admin;

    $form = _wisski_core_pathbuilder_make_form($type);


    $form['#menu'] =  $menu;

    if (element_children($form)) {
      $form['markup'] = array(
          '#prefix' => '<div class="wki-admin-buttons">',
          '#suffix' => '</div>',
          );

      $form['markup']['submit'] = array(
          '#type' => 'submit',
          '#value' => t('Save configuration'),
          );

      $form['markup']['add_group'] = array(
          '#type' => 'submit',
          '#value' => t('Add Group'),
          '#submit' => array('wisski_core_pathbuilder_add_group'),
          );

      $form['markup']['add_path'] = array(
          '#type' => 'submit',
          '#value' => t('Add Field'),
          '#submit' => array('wisski_core_pathbuilder_add_field'),
          );

    }
    else {
      $form['empty_menu'] = array('#value' => t('There are no items yet. Please add some.'));
    }
    
    $form['export'] = array(
      '#collapsed' => TRUE,
      '#type' => 'fieldset',
      '#collapsible' => '1',
      '#title' => t('Export Paths'),
    );

    $form['export']['exp_markup'] = array(
      '#value' => '<strong>' . t('Currently available dumps:') . '</strong><br/>',
      '#prefix' => '<div class="wki-inputbox">',
      '#suffix' => '</div>',
    );

    $curExpos = variable_get("wisski_pb_export", array());
    $newExpos = array();
    $delbuttons = array();
    $str = "";
    if(!empty($curExpos)) {
      
      $form['export']['exp_markup']['table'] = array(
        '#type' => 'form',
        '#suffix' => '</table>',
        '#prefix' => '<table><tr><th>' . t('filename') . '</th><th>' . t('filesize') . '</th><th>' . t('date') . '</th><th>' . t('operations') . '</th></tr>',
      );
      
      foreach($curExpos as $curExpo) {
        if(file_exists($curExpo['file'])) {
          $form['export']['exp_markup']['table'][$curExpo['file']] = array(
            '#type' => 'form',
            '#prefix' => '<tr>',
            '#suffix' => '</tr>',
          );
          
          $newExpos[] = $curExpo; 
      
          $str = '<td><a href="' . file_create_url($curExpo['file']) . '">' . 
            basename($curExpo['file']) . '</a></td><td>' . $curExpo['size'] . 
            ' Bytes</td><td>' . $curExpo['date'] . '</td>';
          
          $form['export']['exp_markup']['table'][$curExpo['file']]['str'] = array(
            '#value' => $str,
          );
          
          $form['export']['exp_markup']['table'][$curExpo['file']]['wisski_core_pathbuilder_delExpo_' . basename($curExpo['file'])] = array(
            '#type' => 'submit',
            '#name' => basename($curExpo['file']),
            '#prefix' => '<td>',
            '#suffix' => '</td>',
            '#value' => t('Delete Export ') . basename($curExpo['file']),
            '#submit' => array('wisski_core_pathbuilder_delExpo'),
            '#attributes' => array('class' => 'wki-delete'),
        	);
        	$str = "";
        }
      }
    } else {
      $str = "None";
    }

    variable_set("wisski_pb_export", $newExpos);

    if(!empty($str));
      $form['export']['exp_markup']['#value'] .= $str;
    
    $form['export']['exp_markup']['export'] = array(
      '#type' => 'submit',
      '#value' => t('Create new export file'),
      '#submit' => array('wisski_core_pathbuilder_export_paths'),
    );
    
    $form['import'] = array(
      '#collapsed' => TRUE,
      '#type' => 'fieldset',
      '#collapsible' => '1',
      '#title' => t('Import Paths'),
    );
    
    $form['import']['imp_markup'] = array(
      '#prefix' => '<div class="wki-inputbox">',
      '#suffix' => '</div>',
    );

    $form['import']['imp_markup']['import_pb'] = array(
      '#type' => 'textfield',
      '#title' => t('Load Pathbuilder-Definitions'),
      '#default_value' => "", 
      '#description' => t("The url of the file that should be loaded in WissKI."),
    );
    
    $form['import']['imp_markup']['import'] = array(
      '#type' => 'submit',
      '#value' => t('Load import file'),
      '#submit' => array('wisski_core_pathbuilder_import_paths'),
    );

    return $form;

  }

/*
function wisski_core_pathbuilder_overview_form($form_state, $menu, $type = 2) {
  
  
  $form['blubb'] = array(
    '#type' => 'textfield',
    '#title' => 'sdfsdf' . $type,
  );
  
  return $form;
        
}
*/

/**
 * hook_pb_treeinformation to create new pathbuilder trees
 *
 */

function wisski_core_get_pb_trees() {
  $trees = module_invoke_all("wisski_pb_treeinformation");
  return $trees;
}

function wisski_core_wisski_pb_treeinformation() {
  return array("internal" => array("title" => "Internal Display", ), "export" => array("title" => "Export", ), "import" => array("title" => "Import", ), "find" => array("title" => "Find", ), "navigate" => array("title" => "Navigate", ), );
}

function wisski_core_get_pb_stores() {
  $stores = module_invoke_all("wisski_pb_storeinformation");
  return $stores;
}

function wisski_core_wisski_pb_storeinformation() {
  return array("local" => array("title" => "Local Store"), );
}

class wisskiRemoteEntityController extends EntityAPIController {
  public function load($ids = array(), $conditions = array()) {
    $entities = array();
    foreach ($ids as $id) {
      if ($entity = remote_web_service_load($id)) {
        $entities[$entity->my_remote_entity_id] = $entity;
      }
    }
    return $entities;
  }
  
  public function save($entity) {
    field_attach_presave('wisski_individual', $entity);
    field_attach_update('wisski_individual', $entity);
    remote_web_service_save($entity);
  }

}

class wisskiRemoteEntityUIController extends EntityDefaultUIController {
}


