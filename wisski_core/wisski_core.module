<?php

use Drupal\wisski_core\WisskiEntityInterface;
use Drupal\wisski_core\Entity\WisskiEntity;

function wisski_core_generate_title($wisski_individual,$force_new=FALSE) {
//ddebug_backtrace();
  
  if (!($wisski_individual instanceof WisskiEntityInterface)) try {
    $wisski_individual = WisskiEntity::load($wisski_individual);
  } catch (\Exception $e) {
    drupal_set_message('Error when loading individual','error');
    return is_string($wisski_individual) ? $wisski_individual : 'WissKI Entity';
  }
  $bundle = \Drupal\wisski_core\Entity\WisskiBundle::load($wisski_individual->bundle());
  if ($wisski_individual->isNew()) {
    return html_entity_decode(t('New :bundle_label',array(':bundle_label'=>$bundle->label()))->render());
  }
  $title_list = $wisski_individual->get('name')->getValue();
  $fallback_title = $title_list[0]['value'];
  $title = $bundle->generateEntityTitle($wisski_individual->id(),$fallback_title,FALSE,$force_new);
  return $title;
}

function wisski_core_generate_title_with_bundle($wisski_individual) {
//ddebug_backtrace();
  if (!($wisski_individual instanceof WisskiEntityInterface)) try {
    $wisski_individual = WisskiEntity::load($wisski_individual);
  } catch (\Exception $e) {
    drupal_set_message('Error when loading individual','error');
    return is_string($wisski_individual) ? $wisski_individual : 'WissKI Entity';
  }
  $bundle = \Drupal\wisski_core\Entity\WisskiBundle::load($wisski_individual->bundle());
  $title_list = $wisski_individual->get('name')->getValue();
  $fallback_title = $title_list[0]['value'];
  $title = $bundle->generateEntityTitle($wisski_individual->id(),$fallback_title,TRUE);
  return $title;
}

function wisski_core_flush_title_caches($bundle_ids=NULL,$entity_ids=NULL) {

  if (is_null($bundle_ids)) {
    \Drupal\wisski_core\WisskiCacheHelper::flushAllEntityTitles();
    return;
  }
  $bundles = \Drupal\wisski_core\Entity\WisskiBundle::loadMultiple($bundle_ids);
  foreach ($bundles as $bundle) {
    $bundle->flushTitleCache($entity_ids);
  }
}

function wisski_trace($dpm=TRUE) {

  $trace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS,3);
  if ($dpm && function_exists('dpm')) {
    $label = (string) $trace[1]['function'].'() called from';
    dpm(array($label => $trace[2]),__METHOD__);
  }
  return $trace[2];
}