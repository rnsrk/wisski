<?php

use Drupal\wisski_core\WisskiEntityInterface;
use Drupal\wisski_core\Entity\WisskiEntity;

use Drupal\wisski_core\WisskiCacheHelper;


define('WISSKI_DEVEL', FALSE);
#define('WISSKI_DEVEL', TRUE);

function wisski_core_cache_flush() {

  WisskiCacheHelper::flushAllEntityTitles();
  WisskiCacheHelper::flushAllPreviewImageUris();
  drupal_set_message(t('Flushed WissKI specific caches'));
}

function wisski_core_generate_title($wisski_individual, $force_new=FALSE, $override_bundle_id = NULL) {

#  drupal_set_message(" ind: " . serialize($wisski_individual)); 

#  drupal_set_message(serialize(debug_backtrace()));
  $create_form_title = FALSE;

  if ($wisski_individual instanceof WisskiEntityInterface) {
#    drupal_set_message("1");
    if ($wisski_individual->isNew()) $create_form_title = TRUE;
    $entity_id = $wisski_individual->id();
    $bundle_id = $wisski_individual->bundle();
    if(!empty($entity_id))
      WisskiCacheHelper::putCallingBundle($entity_id, $bundle_id);
  } else {
#		drupal_set_message("2");
    $entity_id = $wisski_individual;
    $bundle_id = WisskiCacheHelper::getCallingBundle($wisski_individual);
  }
  if ($override_bundle_id !== NULL) {
    $bundle_id = $override_bundle_id;
  }
#  drupal_set_message("3 " . $bundle_id);
  if(empty($bundle_id)) {
    // this is very complicated... do it anyway...
    $pbs = \Drupal\wisski_pathbuilder\Entity\WisskiPathbuilderEntity::loadMultiple();

#    drupal_set_message(serialize($pbs));

    foreach($pbs as $pb) {
      
      $bundle_id = $pb->getBundleIdForEntityId($entity_id);

#      drupal_set_message(serialize($bundle_id));

      if(!empty($bundle_id))
        break;
    }

  }

  $title = '';
  if (!empty($bundle_id)) {
    if ($bundle = \Drupal\wisski_core\Entity\WisskiBundle::load($bundle_id)) {
#      drupal_set_message(serialize($entity_id));
#      drupal_set_message(serialize($bundle->generateEntityTitle($entity_id,FALSE,$force_new)));
      if ($create_form_title) $title = html_entity_decode(t('New :bundle_label',array(':bundle_label'=>$bundle->label()))->render());
      else $title = $bundle->generateEntityTitle($entity_id,FALSE,$force_new);
    }
  }
  if (empty($title)) {
    $title = \Drupal::service('entity_type.manager')->getDefinition('wisski_individual')->getLabel().' '.$entity_id;
    drupal_set_message(t('No title could be generated for this entity'),'warning');
  }
  return $title;
  
}

function wisski_core_flush_title_caches($bundle_ids=NULL,$entity_ids=NULL) {

  if (is_null($bundle_ids)) {
    \Drupal\wisski_core\WisskiCacheHelper::flushAllEntityTitles();
    return;
  }
  $bundles = \Drupal\wisski_core\Entity\WisskiBundle::loadMultiple($bundle_ids);
  foreach ($bundles as $bundle) {
    $bundle->flushTitleCache($entity_ids);
  }
}

function wisski_trace($dpm=TRUE) {
  if (!WISSKI_DEVEL) return;

  $trace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS,3);
  if ($dpm && function_exists('dpm')) {
    $label = (string) $trace[1]['function'].'() called from';
    dpm(array($label => $trace[2]),__METHOD__);
  }
  return $trace[2];
}

function wisski_tick($name='') {
  if (!WISSKI_DEVEL) return;
  
  static $wisski_timestamp;
  $now = microtime(TRUE)*1000;
  if (empty($name)) {
    if (!isset($wisski_timestamp)) $wisski_timestamp = $now;
  } else {
    $diff = ceil($now-$wisski_timestamp);
    if (!empty($name)) {
      if (WISSKI_DEVEL) dpm($diff.' ms',$name);
      if (WISSKI_DEVEL) \Drupal::logger('wisski tick')->debug($name);
    } else {
      if (WISSKI_DEVEL) \Drupal::logger('wisski tick')->debug("reset");
    }
    $wisski_timestamp = $now;
    return $diff;
  }
}


function wpm() {
  if (WISSKI_DEVEL && function_exists('dpm')) {
    call_user_func_array('dpm', func_get_args());
  }
}


function wsmlog($msg, $name = NULL, $status = 'status') {
  if (WISSKI_DEVEL) {
    dpm($msg, $name, $status);
    if ($status == 'error') {
      $level = \Psr\Log\LogLevel::ERROR;
    } elseif ($status == 'warning') {
      $level = \Psr\Log\LogLevel::WARNING;
    } else {
      $level = \Psr\Log\LogLevel::DEBUG;
    }
    
    if ($name == NULL) {
      $name = 'WissKI Debug Log';
    }
    \Drupal::logger($name)->log($level, $msg, array());
  }
}


function wisski_local_store_query($query,$select=NULL) {
  
  $adapter = \Drupal\wisski_salz\AdapterHelper::getPreferredLocalStore();
  $out = array();
  foreach ($adapter->getEngine()->directQuery($query) as $obj) {
    if (isset($select)) {
      $sub = array();
      foreach ($select as $prop) {
        if (property_exists($obj,$prop)) {
          $val = $obj->{$prop};
          if (method_exists($val,'getUri'))
            $sub[$prop] = $val->getUri();
          else
            $sub[$prop] = $val->dumpValue('text');
        }
      }
      if (!empty($sub)) $out[] = $sub;
    } else {
      $sub = array();
      foreach ((array) $obj as $prop => $val) {
        if (method_exists($val,'getUri'))
          $sub[$prop] = $val->getUri();
        else
          $sub[$prop] = $val->dumpValue('text');
      }
      if (!empty($sub)) $out[] = $sub;
    }
  }
  return $out;
}

/**
 * Hook in to alter the behaviour of autocomplete.
 * Because it currently breaks the WissKI functionality.
 */
function wisski_core_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  // only act on wisski individuals
  if(strpos($form_id, "wisski_individual") !== FALSE) {

    $form['#attached']['library'][] = 'wisski_core/wisski_autocomplete';
  }

}
