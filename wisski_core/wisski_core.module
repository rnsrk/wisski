<?php

use Drupal\wisski_core\WisskiEntityInterface;
use Drupal\wisski_core\Entity\WisskiEntity;

use Drupal\wisski_core\WisskiCacheHelper;

function wisski_core_cache_flush() {

  WisskiCacheHelper::flushAllEntityTitles();
  WisskiCacheHelper::flushAllPreviewImageUris();
  drupal_set_message('Flushed the cache');
}

function wisski_core_generate_title($wisski_individual,$force_new=FALSE) {
//ddebug_backtrace();
  
  if (!($wisski_individual instanceof WisskiEntityInterface)) try {
    $wisski_individual = WisskiEntity::load($wisski_individual);
  } catch (\Exception $e) {
    drupal_set_message('Error when loading individual','error');
    return is_string($wisski_individual) ? $wisski_individual : 'WissKI Entity';
  }
  $bundle = \Drupal\wisski_core\Entity\WisskiBundle::load($wisski_individual->bundle());
  if ($wisski_individual->isNew()) {
    return html_entity_decode(t('New :bundle_label',array(':bundle_label'=>$bundle->label()))->render());
  }
  $title = $bundle->generateEntityTitle($wisski_individual->id(),FALSE,$force_new);
  return $title;
}

function wisski_core_generate_title_with_bundle($wisski_individual) {
//ddebug_backtrace();
  if (!($wisski_individual instanceof WisskiEntityInterface)) try {
    $wisski_individual = WisskiEntity::load($wisski_individual);
  } catch (\Exception $e) {
    drupal_set_message('Error when loading individual','error');
    return is_string($wisski_individual) ? $wisski_individual : 'WissKI Entity';
  }
  $bundle = \Drupal\wisski_core\Entity\WisskiBundle::load($wisski_individual->bundle());
  $title = $bundle->generateEntityTitle($wisski_individual->id(),TRUE);
  return $title;
}

function wisski_core_flush_title_caches($bundle_ids=NULL,$entity_ids=NULL) {

  if (is_null($bundle_ids)) {
    \Drupal\wisski_core\WisskiCacheHelper::flushAllEntityTitles();
    return;
  }
  $bundles = \Drupal\wisski_core\Entity\WisskiBundle::loadMultiple($bundle_ids);
  foreach ($bundles as $bundle) {
    $bundle->flushTitleCache($entity_ids);
  }
}

function wisski_trace($dpm=TRUE) {

  $trace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS,3);
  if ($dpm && function_exists('dpm')) {
    $label = (string) $trace[1]['function'].'() called from';
    dpm(array($label => $trace[2]),__METHOD__);
  }
  return $trace[2];
}

function wisski_tick($name='') {
  
  static $wisski_timestamp;
  $now = microtime(TRUE)*1000;
  if (empty($name)) {
    if (!isset($wisski_timestamp)) $wisski_timestamp = $now;
  } else {
    $diff = ceil($now-$wisski_timestamp);
    if (!empty($name)) dpm($diff.' ms',$name);
    $wisski_timestamp = $now;
    return $diff;
  }
}


function wisski_local_store_query($query,$select=NULL) {
  
  $adapter = \Drupal\wisski_salz\AdapterHelper::getPreferredLocalStore();
  $out = array();
  foreach ($adapter->getEngine()->directQuery($query) as $obj) {
    if (isset($select)) {
      $sub = array();
      foreach ($select as $prop) {
        if (property_exists($obj,$prop)) {
          $val = $obj->{$prop};
          if (method_exists($val,'getUri'))
            $sub[$prop] = $val->getUri();
          else
            $sub[$prop] = $val->dumpValue('text');
        }
      }
      if (!empty($sub)) $out[] = $sub;
    } else {
      $sub = array();
      foreach ((array) $obj as $prop => $val) {
        if (method_exists($val,'getUri'))
          $sub[$prop] = $val->getUri();
        else
          $sub[$prop] = $val->dumpValue('text');
      }
      if (!empty($sub)) $out[] = $sub;
    }
  }
  return $out;
}