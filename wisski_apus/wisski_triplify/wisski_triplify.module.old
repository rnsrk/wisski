<?php
// $Id$



function wisski_texttrip_perm() {
  return array('wisski view extractable triples', 'wisski write to node context', 'wisski write to default context');
}


/**
* @author Martin Scholz
*/
function wisski_texttrip_menu () {

  $items = array();
  $items['node/%node/triplify'] = array(
      'title' => 'Extractable triples',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_texttrip_node_triples', 1),
      'access callback' => 'wisski_texttrip_access_view_triples',
      'access arguments' => array(1),
      );
  /* admin settings */
  $items['admin/settings/wisski/text/trip'] = array(
      'title' => 'Triplification',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_texttrip_admin_main'),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_texttrip.admin.inc',
      );
  $items['admin/settings/wisski/text/trip/%/delete'] = array(
      'title' => 'Delete extractor',
      'type' => MENU_CALLBACK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_texttrip_admin_delete_extractor', 5),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_texttrip.admin.inc',
      );
  $items['admin/settings/wisski/text/trip/%/edit'] = array(
      'title' => 'Configure extractor',
      'type' => MENU_CALLBACK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_texttrip_admin_configure_extractor', 5),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_texttrip.admin.inc',
      );
  return $items;

}


function wisski_texttrip_theme() {
  return array(
    'wisski_texttrip_table' => array(
      'file' => 'wisski_texttrip.module',
      'arguments' => array('form' => NULL),
    ),
  );
}



function theme_wisski_texttrip_table($element) {
  
  $header = array();
  $rows = array();
  $first = TRUE;
  $caption = NULL;
  if (isset($element['#caption'])) {
    $caption = $element['#caption'];
    unset($element['#caption']);
  }
  $attrs = isset($element['#attributes']) ? $element['#attributes'] : array();
  $draggable = isset($attrs['class']) && strpos($attrs['class'], 'draggable') !== FALSE;
  
  foreach (element_children($element) as $row_name) {
    $row = array();
    foreach (element_children($element[$row_name]) as $col_name) {
      if ($first) $header[] = $element[$row_name][$col_name]['#title'];
      unset($element[$row_name][$col_name]['#title']);
      if (isset($element[$row_name][$col_name]['#description'])) {
        $prefix = '<span title="' . check_plain($element[$row_name][$col_name]['#description']) . '">';
        $suffix = '</span>';
        unset($element[$row_name][$col_name]['#description']);
      } else {
        $prefix = $suffix = '';
      }
      $row[] = $prefix . drupal_render($element[$row_name][$col_name]) . $suffix;
    }
    $rows[] = $draggable ? array('data' => $row, 'class' => 'draggable') : $row;
    $first = FALSE;
  }


  return theme('table', $header, $rows, $attrs, $caption);
  
}




function wisski_texttrip_nodeapi(&$node, $op, $arg3, $arg4) {
  
  if ($node->type == 'individual') {

    if (($op == 'insert' || $op == 'update')
      && variable_get('wisski_texttrip_trigger_on_save', FALSE)) {
      
      // determine if this is a text instance
      $gid = wisski_pathbuilder_getGroupIDForIndividual(wisski_store_getObj()->wisski_ARCAdapter_delNamespace($node->title));
      if ($gid == -1) return;

      $model = wisski_textmod_get_model();
      if (is_null($model['groups'][$gid]['text_class'])) return;

      wisski_texttrip_triplify($node);
      return;

    } elseif ($op == 'delete') {
      
      $inst = wisski_store_getObj()->wisski_ARCAdapter_delNamespace($node->title);

      $store = wisski_store_getObj()->wisski_ARCAdapter_getStore();
      $store->query("DELETE FROM <$inst>");

    }

  }

}



function wisski_texttrip_format_get($format = NULL, $mode = NULL, $redirect = TRUE) {
  if ($format === NULL) $mode = NULL; // we cannot query a mode without format
  
  $formats = array();
  $q = 'SELECT * FROM {wisski_texttrip_formats}';
  if ($format !== NULL) $q .= ' WHERE (`format` = %d OR `format` = %d)';
  if ($mode !== NULL) $q .= " AND `mode` = '%s'";
  $q .= ' ORDER BY `weight` ASC';
  $res = db_query($q, $format, FILTER_FORMAT_DEFAULT, $mode);
  while ($row = db_fetch_array($res)) {
    $formats[$row['format']][] = $row;
  }
  
  if ($redirect) {
    foreach(variable_get('wisski_texttrip_use_default_format', array_keys(filter_formats())) as $f) {
      $formats[$f] = $formats[0];
    }
  }
  
  if ($format !== NULL) return $formats[$format];
  return $formats;

}



function wisski_texttrip_extractor_get($eid = NULL) {

  static $extractors = array();
  static $all = FALSE;

  if (!$all && ($eid === NULL || ($eid !== NULL && !isset($extractors[$eid])))) {
    $q = 'SELECT * FROM {wisski_texttrip_extractors}';
    if ($eid !== NULL) $q .= ' WHERE `eid` = %d';
    $res = db_query($q, $eid);
    while ($row = db_fetch_array($res)) {
      $row['settings'] = unserialize($row['settings']);
      $extractors[$row['eid']] = $row;
    }

  }
  
  if ($eid === NULL) {
    return $extractors;
  } elseif (!isset($extractors[$eid])) {
    return NULL;
  } else {
    return $extractors[$eid];
  }

}


function wisski_texttrip_extractor_types() {
  
  static $types = NULL;

  if ($types === NULL) {
    foreach (module_implements('wisski_texttrip_extractor') as $module)
      $types[$module] = module_invoke($module, 'wisski_texttrip_extractor', 'list');
  }
  
  return $types;

}


function wisski_texttrip_create_instance_uri($class) {
  global $base_root, $base_path;
  return $base_root . $base_path . wisski_get_uuid(4);
}


function wisski_texttrip_triplify($node) {
  
  $format = wisski_texttrip_format_get($node->format, 'save');
  if (!$format) return;

  $tid = wisski_get_uuid(4);  // a task id that is unique to this triplification task. format extractors may communicate using that id.
  $inst = wisski_store_getObj()->wisski_ARCAdapter_delNamespace($node->title); 

  $store = wisski_store_getObj()->wisski_ARCAdapter_getStore();

  $store->query("DELETE FROM <$inst>");
  foreach ($format as $format_step) {
    $eid = $format_step['extractor'];
    $extr = wisski_texttrip_extractor_get($eid);
    
    $graph_type = $extr['context'];
    $graph = $graph_type == 'node' ? $inst : wisski_store_getObj()->wisski_ARCAdapter_graphName();
    $return = module_invoke($extr['module'], 'wisski_texttrip_extractor', 'triplify', $extr['delta'], $extr['settings'], $tid, $node->body, $inst);
    
    if (user_access("wisski write to all contexts") === TRUE || user_access("wisski write to $graph_type context") === TRUE) {
      $triples = $return['triples'];
     
      $store->insert($triples, $graph);
      foreach($triples as $triple) {
        wisski_store_addNodeForTriple($triple);
      }
    }

  }

}


function wisski_texttrip_wisski_texttrip_extractor($op, $delta = 0, $settings = NULL, $tid = NULL, $text = '', $text_inst = '') {
  
  include_once(dirname(__FILE__) . '/wisski_texttrip.triplify.standard.inc');

  switch($op) {
    case 'list':
      
      return array(0 => t('Standard triplifier'));

    case 'settings':
      
      return _wisski_texttrip_triplify_standard_admin($settings);
    
    case 'submit':
      
      return _wisski_texttrip_triplify_standard_admin_submit($settings);  // $settings ^= $form_state['values']['specific']!
      
    case 'triplify':
      $triples = _wisski_texttrip_triplify_standard_prepare_walk($settings, $tid, $text, $text_inst);
      return $triples;

  }

}


function wisski_texttrip_node_triples($form, $node) {
  
  $format = wisski_texttrip_format_get($node->format, 'view');
  if (!$format) {
    drupal_set_message(t('No extractors defined for text format.'));
    return array();
  }
  
  $tid = wisski_get_uuid(4);  // a task id that is unique to this triplification task. formatactors may communicate using that id.
  $inst = wisski_store_getObj()->wisski_ARCAdapter_delNamespace($node->title); 

  $store = wisski_store_getObj()->wisski_ARCAdapter_getStore();
  
  $form = array();
  $form['notice'] = array(
    '#value' => t('!n Some intermediate triples may be incorrectly shown as non-existing.', array('!n' => '<strong>' . t('Note') . ':</strong>'))
  );

  foreach ($format as $format_step) {
    $eid = $format_step['extractor'];
    $extr = wisski_texttrip_extractor_get($eid);
    $graph = $extr['context'] == 'node' ? $inst : wisski_store_getObj()->wisski_ARCAdapter_graphName();
    $return = module_invoke($extr['module'], 'wisski_texttrip_extractor', 'triplify', $extr['delta'], $extr['settings'], $tid, $node->body, $inst);
    $triples = $return['triples'];
    
    $form["table_$eid"] = array(
      '#prefix' => '<div>',
      '#theme' => 'wisski_texttrip_table',
      '#caption' => t('Extractor: @e, Context: @c', array('@e' => $extr['name'], '@c' => $extr['context'])),
      '#suffix' => '</div>',
    );

    $i = 0;
    foreach ($triples as $tr) {
      
      $status = 'unknown';
      if ($tr['s_type'] == 'uri' && $tr['o_type'] != 'bnode') {
        $q = "ASK FROM <$graph> { <" . $tr['s'] . "> <" . $tr['p'] . '> ';
        $q .= $tr['o_type'] == 'uri' ? '<' . $tr['o'] . '>' : ("'" . wisski_store_escape_sparql_literal($tr['o']) . "'");
        $q .= '}';
        $status = $store->query($q, 'raw') ? 'exists' : 'missing';
      }
      
      $form["table_$eid"]["tr_$i"] = array(
        'status' => array(
          '#type' => 'hidden',
          '#value' => $status,
        ),
        'add_remove' => array(
          '#type' => 'checkbox',
          '#title' => t('Add/Remove'),
          '#default_value' => $status == 'exists',
          '#disabled' => $extr['context'] != 'node',
          '#access' => $status != 'unknown',
        ),
        's' => array(
          '#type' => 'item',
          '#title' => t('Subject'),
          '#description' => $tr['s'],
          '#value' => wisski_store_getObj()->wisski_ARCAdapter_addNamespace($tr['s']),
        ),
        's_type' => array(
          '#type' => 'hidden',
          '#value' => $tr['s_type'],
        ),
        'p' => array(
          '#type' => 'item',
          '#title' => t('Predicate'),
          '#description' => $tr['p'],
          '#value' => wisski_store_getObj()->wisski_ARCAdapter_addNamespace($tr['p']),
        ),
        'o' => array(
          '#type' => 'item',
          '#title' => t('Object'),
          '#description' => $tr['o'],
          '#value' => wisski_store_getObj()->wisski_ARCAdapter_addNamespace($tr['o']),
        ),
        'o_type' => array(
          '#type' => 'hidden',
          '#value' => $tr['o_type'],
        ),
      );
      $i++;

    }
  }
  
  return $form;

}


function wisski_texttrip_access_view_triples($node) {
  if (user_access('wisski view extractable triples') !== TRUE) return FAlSE;

  $gid = wisski_pathbuilder_getGroupIDForIndividual(wisski_store_getObj()->wisski_ARCAdapter_delNamespace($node->title));
  if ($gid == -1) return FALSE;

  $model = wisski_textmod_get_model();

  if (is_null($model['groups'][$gid]['text_class'])) return FALSE;

  return TRUE;

}


// @depricated use wisski_store_escape_sparql_literal()
function wisski_texttrip_escape_sparql_literal($lit) {
  return str_replace(str_split("'\n\r\\"), str_split("\\'\\n\\r\\\\", 2), $lit);
}
