<?php
// $ID$

/**
* Basic module for the WissKI-Communication with Drupal 7
* Provides the SPARQL12 Communication
*
*
* @author: Mark Fichtner, Martin Scholz
*
*/

module_load_include('php', 'wisski_salz', "adapters/sparql12/SPARQL12Adapter");
module_load_include('php', 'wisski_salz', "interface/AdapterInterface");

/**
 * Implements hook_menu().
 */
 function sparql12_adapter_menu() {
  $items = array();
  drupal_set_message("Hallo! Ich bin SPARQL 1.2");

  $stores = wisski_salz_get_store_types();
  foreach($stores as $key => $store_type) {
    drupal_set_message("Es gibt \$store_type: " . serialize($store_type));

    if(sparql12_adapter_wisski_get_store_type()==$store_type){
      drupal_set_message("\$store_type ist " . serialize($store_type));

      $items['admin/config/wisski/salz/add/' . $key] = array(
      'title' => 'Add new store of type ' . $store_type,
      'description' => 'Manage the storage backends',
      'type' => MENU_NORMAL_ITEM,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sparql12_adapter_wisski_settings_page'),
      'access arguments' => array('administer wisski'),
      );

      $store_instances = sparql12_adapter_wisski_get_store_instances();
      drupal_set_message(serialize( $store_instances));

      foreach($store_instances as $key2 => $store_instance) {
        drupal_set_message($key . " und " . $key2);
        $items['admin/config/wisski/salz/' . $key . '/' .  $key2] = array(
        'title' => 'Edit Store ' . $store_instance->getType() . ' ' . $key2,
        'description' => 'Manage the storage backends',
        'type' => MENU_LOCAL_TASK,
        //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('sparql12_adapter_wisski_edit_form', $store_instance),
        'access arguments' => array('administer wisski'),
        );
      }
    }
  }
  return $items;
 }


function sparql12_adapter_wisski_get_store_settings() {
  $adapter = new SPARQL12Adapter();
  return $adapter->getSettings();
}

function sparql12_adapter_wisski_get_store() {
  $adapter = new SPARQL12Adapter();
  return $adapter;
}

function sparql12_adapter_wisski_get_store_type() {
    return "SPARQL 1.2";
  }


function sparql12_adapter_wisski_get_store_instances() {
  $sparql12_adapter_wisski_instances = variable_get('sparql12_adapter_wisski_instances', array());

  $all_instances = array();

  foreach($sparql12_adapter_wisski_instances as $key => $value) {
    $new_instance = new SPARQL12Adapter();
    sparql12_adapter_initialize_instance($new_instance, $key);
    //$new_instance->setSettings($value);
    $all_instances[$key] = $new_instance;
  }
  return $all_instances;
}

function sparql12_adapter_initialize_instance(&$instance, $id) {
    drupal_set_message("sparql12-instance: " . serialize($instance));
    $settingnames = array("query_endpoint" => "sparql12_query_endpoint_" . $id, "update_endpoint" => "sparql12_update_endpoint_" . $id, "local_data" => "sparql12_local_data_" . $id);

    foreach($settingnames as $key => $value) {
      $instance->setSettings($key, variable_get($value, ""));
    }

}

function sparql12_adapter_wisski_add_store_instances($instance_to_add){
  ddebug_backtrace();
  $instances = variable_get('sparql12_adapter_wisski_instances', array());
  $instances[] = $instance_to_add->getSettings();
  variable_set('sparql12_adapter_wisski_instances', $instances);
}


function sparql12_adapter_wisski_set_store_instances($instances){
  variable_set('sparql12_adapter_wisski_instances', $instances);
}

function sparql12_adapter_wisski_settings_page($store_instance = "") {
  if(empty($store_instance)) {
    $store_instance = new SPARQL12Adapter();
  }

  $settings = $store_instance->getSettings();

  $form['query_endpoint'] = array(
      '#type' => 'textfield',
      '#title' => t('Query Endpoint'),
      '#default_value' => isset($settings['query_endpoint']) ? $settings['query_endpoint'] : '',
    );

  $form['update_endpoint'] = array(
      '#type' => 'textfield',
      '#title' => t('Update Endpoint'),
      '#default_value' => isset($settings['update_endpoint']) ? $settings['update_endpoint'] : '',
    );

  $form['local_data'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use this store as local store'),
      '#default_value' => isset($settings['local_data']) ? $settings['local_data'] : '',
    );

  $form['ontologies_loaded'] = array(
      '#type' => 'fieldset',
      '#title' => t('Loaded ontologies'),
      '#collapsible' => TRUE,
    );


  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#submit' => array('sparql12_adapter_wisski_form_submit'),
    );

   $i = 0;
    if(!empty($settings['ontologies_loaded'])) {
      foreach ($settings['ontologies_loaded'] as $ont) {
        $i++;
        $form['ontologies_loaded']["ont$i"] = array(
          '#type' => 'markup',
          '#value' => ''
        );
      }
    }
     return $form;
}

function sparql12_adapter_wisski_form_submit($form, &$form_state, $store_instance = NULL){
  /* if(empty($store_instance))
    $store_instance = new SPARQL12Adapter();

 //drupal_set_message("hallo welt " . serialize($form_state));
 drupal_set_message("\$this in submit: " . serialize($store_instance));

 sparql12_adapter_wisski_add_store_instances($store_instance);

 $installed_store_instances = sparql12_adapter_wisski_get_store_instances();
 drupal_set_message("\$store_instances: " . serialize($installed_store_instances));

 menu_rebuild();

 foreach($installed_store_instances as $key => $installed_store_instance) {
  $form_state['redirect'] = 'admin/config/wisski/salz/' . arg(5) . '/' . $key;
  drupal_set_message("\$key: " . serialize($key));
 }

 $varname1 = "sparql12_query_endpoint_" . $key;
 $varname2 = "sparql12_update_endpoint_" . $key;
 $varname3 = "sparql12_local_data_" . $key;
 variable_set($varname1, $form_state['values']['query_endpoint']);
 variable_set($varname2, $form_state['values']['update_endpoint']);
 variable_set($varname3, $form_state['values']['local_data']);
}
*/

if(empty($store_instance))
    $store_instance = new SPARQL12Adapter();
  //drupal_set_message("hallo welt " . serialize($form_state));
  drupal_set_message("\$store_instance in submit: " . serialize($store_instance));

  if(arg(4)=="add"){
    drupal_set_message("ARG(4) IST " . arg(4));
    sparql12_adapter_wisski_add_store_instances($store_instance);
    $installed_store_instances = sparql12_adapter_wisski_get_store_instances();
    drupal_set_message("\$store_instances: " . serialize($installed_store_instances));

    menu_rebuild();

    foreach($installed_store_instances as $key => $installed_store_instance) {
      $form_state['redirect'] = 'admin/config/wisski/salz/' . arg(5) . '/' . $key;
      drupal_set_message("\$key: " . serialize($key));
      }
      $varname1 = "sparql12_query_endpoint_" . $key;
      $varname2 = "sparql12_update_endpoint_" . $key;
      $varname3 = "sparql12_local_data_" . $key;
      variable_set($varname1, $form_state['values']['query_endpoint']);
      variable_set($varname2, $form_state['values']['update_endpoint']);
      variable_set($varname3, $form_state['values']['local_data']);
   }
else {
    drupal_set_message("ARG(4) IST im else " . arg(4));
    drupal_set_message("ARG(4) ist nicht add, sondern " . arg(4));
    $form_state['redirect'] = 'admin/config/wisski/salz/' . arg(4) . '/' . arg(5);
    $varname1 = "sparql12_query_endpoint_" . arg(5);
    $varname2 = "sparql12_update_endpoint_" . arg(5);
    $varname3 = "sparql12_local_data_" . arg(5);
    variable_set($varname1, $form_state['values']['query_endpoint']);
    variable_set($varname2, $form_state['values']['update_endpoint']);
    variable_set($varname3, $form_state['values']['local_data']);
   }
}

function sparql12_adapter_wisski_edit_form($form, &$form_state, $store_instance){
  // ddebug_backtrace();
  // throw new Exception("STOP");
  drupal_set_message("sparql12_adapter_wisski_edit_form");
  $store_instance->setSettings('query_endpoint', variable_get("sparql12_query_endpoint_" . arg(5)));
  $store_instance->setSettings('update_endpoint', variable_get("sparql12_update_endpoint_" . arg(5)));
  $store_instance->setSettings('local_data', variable_get("sparql12_local_data_" . arg(5)));
  return sparql12_adapter_wisski_settings_page($store_instance);
}
