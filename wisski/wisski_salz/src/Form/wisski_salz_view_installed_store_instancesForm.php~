<?php
/**
 * @file
 * Contains \Drupal\wisski_salz\Form\wisski_salzForm
 *
 */
 
namespace Drupal\wisski_salz\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements wisski_salz_view_installed_store_instances
 */
 
class wisski_salz_view_installed_store_instancesForm extends FormBase {
  
  
  /**
   * {@inheritdoc}.
   */
  public function getFormId() {
    return 'wisski_salz_view_installed_store_instancesForm';
  }
  
  public function buildForm(array $form, FormStateInterface $form_state) {
    return $this->wisski_salz_view_installed_store_instances($form, $form_state);
  }
  
  public function validateForm(array &$form, FormStateInterface $form_state) {
  
  }
  
  public function submitForm(array &$form, FormStateInterface $form_state) {
    drupal_set_message("muahah");
  }

  
  public function wisski_salz_view_installed_store_instances($form, &$form_state) {
    wisski_salz_set_store_types();	
    $store_types = wisski_salz_get_store_types();
    $store_instances = wisski_salz_get_installed_store_instances();
    // drupal_set_message("Store Instances = " . serialize($store_instances));
    //  $key = _sparql11_adapter_get_db_key();
    $link = array();

    foreach($store_types as $key => $store_type){
	    $link[$store_type['name']] = array(
		    'data' => Drupal::l('Add new Store Instance of Type ' . $store_type['label'], Url::fromUri('admin/config/wisski/salz/add/' . $store_type['name'])));
    }
    //  $form = array();
    $sorted_store_instances_by_type = array();
    
    // header for table structure
    $header = array(
	    'store_instance_name' => t('Store Instance Name'),
	    'store_type' => t('Store Type'),
	    'settings' => t('Settings'),
    );
    $local_store = wisski_salz_get_local_store();
	  // content of table
    $options = array();
    foreach ($store_instances as $key2 => $store_instance){
	    $store_instance_settings = unserialize($store_instance->settings);
	    if(!is_numeric($local_store) && $local_store->name == $store_instance->name){
		    $text = $local_store->label . " => LOCAL STORE";
	    } else {
		    $text = $store_instance->label;	    
	    }
	    if(!empty($store_types[$store_instance->type])) {
	      $type = $store_types[$store_instance->type];
	      $store_type_name = $type['name'];
	      $store_type_label = $type['label'];
	      $store_type_module = $type['module'];
      }
	    //$text = $store_instance->label;
	    $path = 'admin/config/wisski/salz/edit/' . $store_type_name . '/' . $store_instance->name;
	    $primary_settings = module_invoke($store_type_module,'wisski_primary_store_settings');
	    if (!empty($primary_settings)) $store_instance_settings = array_intersect_key($store_instance_settings,array_flip($primary_settings));
	    if ($store_type_label == sparql11_adapter_wisski_get_store_type()){ 
		    $options[$key2] = array(
			    'store_instance_name' => array(
				    'data' => array(
					    '#type' => 'link',
					    '#title' => $text,
					    '#href' => $path,
					   // '#options' => $l_options,
				    ),
			    ),
			    'store_type' => $store_type_label,
			    'settings' => "<div class='wki_grey'>" . implode(', ',$store_instance_settings) . "</div>",
		    );  
      }
    }

    $form = array();
    $form['add_link'] = array(
      'link' => array(
          '#theme' => 'item_list',
          '#items' => $link,
          '#title' => t('Add new Store'),
      ),
    );
    
    $form['set_local_store'] = array(
            '#type' => 'submit',
            '#value' => t('Set selected local store'),
            '#submit' => array('wisski_salz_set_local_store'),
	    '#prefix' => '<br> <br>',
	   // '#suffix' => '<br>',
    );
    $form['unset_local_store'] = array(
            '#type' => 'submit',
            '#value' => t('Unset selected local store'),
            '#submit' => array('wisski_salz_unset_local_store'),
	   // '#prefix' => '<br> <br>',
	   // '#suffix' => '<br>',
    );
  
    $form['table'] = array(
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $options,
      '#empty' => t('No stores found'),
      '#multiple' => FALSE,
      '#prefix' => '<br>',
      '#suffix' => '<br>',
    );   
/*
    foreach($sorted_store_instances_by_type as $key => $value) {
     drupal_set_message("sorted store instances = " . serialize($sorted_store_instances_by_type));
     drupal_set_message("key = " . serialize($key));
     drupal_set_message("value = " . serialize($value));
        $store_type_string = $store_types[$key]['label'];
          $form[$key] = array(
            'list' => array(
                  '#theme' => 'item_list',
                  '#items' => $value,
                  '#title' => t($store_type_string),
	  ),
  );
 */

#     menu_router_rebuild();  
#     menu_rebuild();
     $form['recover'] = array(
            '#type' => 'submit',
            '#value' => t('Recover all deleted stores'),
            '#submit' => array('wisski_salz_recover_deleted_stores'),
     );
  
    return $form;
}

function wisski_salz_config_page() {
  wisski_salz_set_store_types();
  $store_types = wisski_salz_get_store_types();
  $items = array();

  foreach($store_types as $key => $store_type) {
     $items[] = array(
     //'data' => Drupal::l($store_type['label'], 'admin/config/wisski/salz/add/' . $key),
     'data' => Drupal::l($store_type['label'], Url::fromUri('admin/config/wisski/salz/add/' . $store_type['name'])),
    );
  }
  return array(
    'list' => array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#title' => t('Choose type of store to add.'),
    ),
  );
}



}
