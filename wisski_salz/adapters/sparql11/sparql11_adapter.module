<?php
// $ID$

/**
* Basic module for the WissKI-Communication with Drupal 7
* Provides the SPARQL11 Communication
*
*
* @author: Mark Fichtner, Martin Scholz
*
*/

module_load_include('php', 'wisski_salz', "adapters/sparql11/SPARQL11Adapter");
module_load_include('php', 'wisski_salz', "interface/AdapterInterface");

/**
 * Implements hook_menu().
 */
 function sparql11_adapter_menu() {
  $items = array();
  //drupal_set_message("Hallo! Ich bin SPARQL 1.1");

//  $store_types = wisski_salz_get_store_types();
//  foreach($store_types as $key => $store_type) {
    //drupal_set_message("Es gibt \$store_type: " . serialize($store_type));

//    if(sparql11_adapter_wisski_get_store_type()==$store_type){
      $store_type = sparql11_adapter_wisski_get_store_type();
      $key = preg_replace('/[^a-z0-9_]/u','',strtolower($store_type));
      drupal_set_message("line 30: \$store_type ist " . serialize($store_type)."\n \$key ist ".$key);

      $items['admin/config/wisski/salz/add/' . $key] = array(
      'title' => 'Add new store of type ' . $store_type,
      'description' => 'Manage the storage backends',
      'type' => MENU_NORMAL_ITEM,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sparql11_adapter_wisski_settings_page'),
      'access arguments' => array('administer wisski'),
      );

      $store_instances = sparql11_adapter_get_store_instances();
      
//      drupal_set_message("line 44: ".serialize($store_instances));
      dpm($store_instances);
      foreach($store_instances as $key2 => $store_instance) {
        //drupal_set_message($key . " und " . $key2);
        $items['admin/config/wisski/salz/' . $key . '/' .  $key2] = array(
        'title' => 'Edit Store ' . $store_type . ' ' . $key2,
        'description' => 'Manage the storage backends',
        'type' => MENU_LOCAL_TASK,
        //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('sparql11_adapter_wisski_edit_form', $store_instance->name),
        'access arguments' => array('administer wisski'),
        );

        $items['admin/config/wisski/salz/delete/' . $key . '/' .  $key2] = array(
        'title' => 'Delete Store ' . $store_type . ' ' . $key2,
        'description' => 'Manage the storage backends',
        'type' => MENU_NORMAL_ITEM,
        //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('sparql11_adapter_wisski_delete_form', $store_instance),
        'access arguments' => array('administer wisski'),
        );
      }
//    }
//  }
  return $items;
 }


function sparql11_adapter_wisski_get_store_settings() {
  $adapter = new SPARQL11Adapter();
  return $adapter->getSettings();
}

function sparql11_adapter_wisski_get_store() {
  $adapter = new SPARQL11Adapter();
  return $adapter;
}

function sparql11_adapter_wisski_get_store_type() {
    return "SPARQL 1.1";
  }

function sparql11_adapter_get_store_instances() {
  return db_select('sparql11_adapter_stores','tab')->fields('tab')->execute()->fetchAll();
}


function sparql11_adapter_wisski_get_store_instances() {
  $sparql11_adapter_wisski_instances = variable_get('sparql11_adapter_wisski_instances', array());

  $all_instances = array();

  foreach($sparql11_adapter_wisski_instances as $key => $value) {
    $new_instance = new SPARQL11Adapter();
    sparql11_adapter_initialize_instance($new_instance, $key);
#    $new_instance->setSettings($value);
    $all_instances[$key] = $new_instance;
  }
  return $all_instances;
}

function sparql11_adapter_initialize_instance(&$instance, $id) {
    drupal_set_message(serialize($instance));
    $settingnames = array("query_endpoint" => "sparql11_query_endpoint_" . $id, "update_endpoint" => "sparql11_update_endpoint_" . $id, "local_data" => "sparql11_local_data_" . $id);

    foreach($settingnames as $key => $value) {
      $instance->setSettings($key, variable_get($value, ""));
    }
}

function sparql11_adapter_wisski_get_store_instances_by_type() {
  $sparql11_adapter_wisski_instances = variable_get('sparql11_adapter_wisski_instances', array());

  $all_instances = array();

  foreach($sparql11_adapter_wisski_instances as $key => $value) {
    $new_instance = new SPARQL11Adapter();
    $new_instance->setSettings($value);
    $all_instances[$key] = $new_instance;
  }
  return array(sparql11_adapter_wisski_get_store_type() => $all_instances);
}

/*
function sparql11_adapter_wisski_add_store_instances($instance_to_add){
  ddebug_backtrace();
  $instances = variable_get('sparql11_adapter_wisski_instances', array());
  drupal_set_message("\$instances IN ADD_STORE_INSTANCES: " . serialize($instances));
  $instances[] = $instance_to_add->getSettings();
  variable_set('sparql11_adapter_wisski_instances', $instances);
}
*/

function sparql11_adapter_wisski_delete_store_instances($instance_to_delete){
  $instances = variable_get('sparql11_adapter_wisski_instances', array());
  drupal_set_message("IN DELETE_STORE_INSTANCES");
  drupal_set_message("\$instances IN DELETE_STORE_INSTANCES: " . serialize($instances));
  drupal_set_message("\$instance_to_delete IN DELETE_STORE_INSTANCES: " . serialize($instance_to_delete));
  $all_sparql11_instances = sparql11_adapter_wisski_get_store_instances();
  drupal_set_message("\$all_sparql11_instances IN DELETE_STORE_INSTANCES: " . serialize($all_sparql11_instances));
  drupal_set_message("\$instance_to_delete SETTINGS: " . serialize($instance_to_delete->getSettings()));
  if(in_array($instance_to_delete, $all_sparql11_instances)){
    drupal_set_message("\$instance_to_delete IS IN \$all_sparql11_instances!");
    unset($instances[array_search($instance_to_delete, $all_sparql11_instances)]);
    drupal_set_message("\$all_sparql11_instances IN DELETE_STORE_INSTANCES NACH UNSET!: " . serialize($all_sparql11_instances));
    sparql11_adapter_wisski_set_store_instances($instances);
    //variable_set('sparql11_adapter_wisski_instances', $instances);
    drupal_set_message("\$instances IN DELETE_STORE_INSTANCES NACH UNSET!: " . serialize($instances));
    drupal_set_message("ARG(4) in SETTINGS_PAGE: " . arg(4));
    drupal_set_message("ARG(5) in SETTINGS_PAGE: " . arg(5));
    drupal_set_message("ARG(6) in SETTINGS_PAGE: " . arg(6));

    $varname1 = "sparql11_query_endpoint_" . arg(5);
    $varname2 = "sparql11_update_endpoint_" . arg(5);
    $varname3 = "sparql11_local_data_" . arg(5);
    variable_del($varname1);
    variable_del($varname2);
    variable_del($varname3);
  }
  //return $instances;
}

function sparql11_adapter_wisski_set_store_instances($instances){
  variable_set('sparql11_adapter_wisski_instances', $instances);
}

function sparql11_adapter_wisski_settings_page($store_instance_name = "") {
  $settings = array();
  if(!empty($store_instance_name)) {
    $settings = (array)sparql11_adapter_wisski_db_get_instance_by_name($store_instance_name);
  }
  drupal_set_message("loaded store instance ".$store_instance_name." as \n".serialize($settings));
//  $settings = $store_instance->getSettings();

  $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#default_value' => '',
    );

  $form['query_endpoint'] = array(
      '#type' => 'textfield',
      '#title' => t('Query Endpoint'),
      '#default_value' => '',
    );

  $form['update_endpoint'] = array(
      '#type' => 'textfield',
      '#title' => t('Update Endpoint'),
      '#default_value' => '',
    );

  $form['local_data'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use this store as local store'),
      '#default_value' => '',
    );

  $form['ontologies_loaded'] = array(
      '#type' => 'fieldset',
      '#title' => t('Loaded ontologies'),
      '#collapsible' => TRUE,
    );

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#submit' => array('sparql11_adapter_wisski_form_submit'),
    );

    $form['load'] = array(
      '#type' => 'submit',
      '#value' => t('Load'),
      '#submit' => array('sparql11_adapter_wisski_testload', array($store_instance_name)),
    );

  $installed_store_instances = sparql11_adapter_get_store_instances();
  drupal_set_message("\$installed_store_instances in SETTINGS_PAGE: " . serialize($installed_store_instances));
  drupal_set_message("ARG(4) in SETTINGS_PAGE: " . arg(4));
  drupal_set_message("ARG(5) in SETTINGS_PAGE: " . arg(5));

    $link = array(
    'data' => l('Delete store  SPARQL 1.1' . arg(5), 'admin/config/wisski/salz/delete/' . arg(4) . '/' . arg(5)));

    $form['delete'] = array(
        'link' => array(
            '#theme' => 'item_list',
            '#items' => $link,
            '#title' => t('Delete Store'),
        ),
    );
  //}
/* spaeter
   $i = 0;
    if(!empty($settings['ontologies_loaded'])) {
      foreach ($settings['ontologies_loaded'] as $ont) {
        $i++;
        $form['ontologies_loaded']["ont$i"] = array(
          '#type' => 'markup',
          '#value' => ''
        );
      }
    }
    */
     return $form;
}

function sparql11_adapter_wisski_testload($store_instance){
  $store_instance->test();

}

function sparql11_adapter_wisski_form_submit($form, &$form_state, $store_instance = NULL){
   /*if(empty($store_instance))
    $store_instance = new SPARQL11Adapter();
 //drupal_set_message("hallo welt " . serialize($form_state));
 drupal_set_message("\$store_instance in submit: " . serialize($store_instance));

 menu_rebuild();

// if(arg(4)=="add"){
    drupal_set_message("ARG(4) IST " . arg(4));
 sparql11_adapter_wisski_add_store_instances($store_instance);

 $installed_store_instances = sparql11_adapter_wisski_get_store_instances();
 drupal_set_message("\$store_instances: " . serialize($installed_store_instances));



 foreach($installed_store_instances as $key => $installed_store_instance) {
  $form_state['redirect'] = 'admin/config/wisski/salz/' . arg(5) . '/' . $key;
  drupal_set_message("\$key: " . serialize($key));
 }

 $varname1 = "sparql11_query_endpoint_" . $key;
 $varname2 = "sparql11_update_endpoint_" . $key;
 $varname3 = "sparql11_local_data_" . $key;
 variable_set($varname1, $form_state['values']['query_endpoint']);
 variable_set($varname2, $form_state['values']['update_endpoint']);
 variable_set($varname3, $form_state['values']['local_data']);
}
*/
   if(empty($store_instance))
    $store_instance = new SPARQL11Adapter();
  //drupal_set_message("hallo welt " . serialize($form_state));
  drupal_set_message("\$store_instance in submit: " . serialize($store_instance));



  if(arg(4)=="add"){
    drupal_set_message("ARG(4) IST " . arg(4));
//    sparql11_adapter_wisski_add_store_instances($store_instance);
    $installed_store_instances = sparql11_adapter_wisski_get_store_instances();
    drupal_set_message("\$store_instances: " . serialize($installed_store_instances));

    menu_rebuild();

    foreach($installed_store_instances as $key => $installed_store_instance) {
      $form_state['redirect'] = 'admin/config/wisski/salz/' . arg(5) . '/' . $key;
      drupal_set_message("\$key: " . serialize($key));
    }
    $settings = array(
      'name' => $form_state['values']['name'],
      'query_endpoint' => $form_state['values']['query_endpoint'],
      'update_endpoint' => $form_state['values']['update_endpoint'],
      'local_data' => $form_state['values']['local_data'],
    );
    sparql11_adapter_wisski_db_insert_settings($settings);
    /* alte Version
    $varname1 = "sparql11_query_endpoint_" . $key;
    $varname2 = "sparql11_update_endpoint_" . $key;
    $varname3 = "sparql11_local_data_" . $key;
    variable_set($varname1, $form_state['values']['query_endpoint']);
    variable_set($varname2, $form_state['values']['update_endpoint']);
    variable_set($varname3, $form_state['values']['local_data']);
    */
  }
else {
    drupal_set_message("ARG(4) IST im else " . arg(4));
    drupal_set_message("ARG(4) ist nicht add, sondern " . arg(4));
    $form_state['redirect'] = 'admin/config/wisski/salz/' . arg(4) . '/' . arg(5);
    $settings = array(
      'name' => $form_state['values']['name'],
      'query_endpoint' => $form_state['values']['query_endpoint'],
      'update_endpoint' => $form_state['values']['update_endpoint'],
      'local_data' => $form_state['values']['local_data'],
    );
    /*
    $varname1 = "sparql11_query_endpoint_" . arg(5);
    $varname2 = "sparql11_update_endpoint_" . arg(5);
    $varname3 = "sparql11_local_data_" . arg(5);
    variable_set($varname1, $form_state['values']['query_endpoint']);
    variable_set($varname2, $form_state['values']['update_endpoint']);
    variable_set($varname3, $form_state['values']['local_data']);
    */
   }
}

function sparql11_adapter_wisski_db_insert_settings($settings) {
  
  db_insert('sparql11_adapter_stores')->fields($settings)->execute();
                                                            
}

function sparql11_adapter_wisski_db_get_instance_by_name($name) {
  return db_select('sparql11_adapter_stores','s')->fields('s')->condition('name',$name,'=')->execute()->fetchObject();
}

function sparql11_adapter_wisski_edit_form($form, &$form_state, $store_instance){
  // ddebug_backtrace();
  // throw new Exception("STOP");
  drupal_set_message("sparql11_adapter_wisski_edit_form: \$store_instance = " . serialize($store_instance));
//  $store_instance->setSettings('query_endpoint', variable_get("sparql11_query_endpoint_" . arg(5)));
//  $store_instance->setSettings('update_endpoint', variable_get("sparql11_update_endpoint_" . arg(5)));
//  $store_instance->setSettings('local_data', variable_get("sparql11_local_data_" . arg(5)));
  return sparql11_adapter_wisski_settings_page($store_instance);
}

function sparql11_adapter_wisski_delete_form($form, &$form_state, $store_instance){

  drupal_set_message("\$store_instance IN DELETE_FORM: " . serialize($store_instance));
  sparql11_adapter_wisski_delete_store_instances($store_instance);
//  $installed_store_instances = sparql11_adapter_wisski_get_store_instances();
//  drupal_set_message("\$installed_store_instances after deletion: " . serialize($installed_store_instances));
//  //menu_rebuild();
//  foreach($installed_store_instances as $key => $installed_store_instance) {
//      $form_state['redirect'] = 'admin/config/wisski/salz/delete/' . arg(5) . '/' . $key;
//      drupal_set_message("\$key in delete_form: " . serialize($key));
//      }
  //menu_rebuild();
//  $markup = t('Test');
//  return array('#markup' => $markup);
$form['description'] = array(
    '#type' => 'item',
    '#title' => t('The store was successfully deleted.'),
  );
  return $form;
  //$form_state['redirect'] = 'admin/config/wisski/salz';
}
