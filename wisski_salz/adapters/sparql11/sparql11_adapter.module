<?php
// $ID$

/**
* Basic module for the WissKI-Communication with Drupal 7
* Provides the SPARQL11 Communication
*
*
* @author: Mark Fichtner, Martin Scholz
*/

module_load_include('php', 'wisski_salz', "adapters/sparql11/SPARQL11Adapter");
module_load_include('php', 'wisski_salz', "interface/AdapterInterface");

/**
 * Implements hook_menu().
 */
function sparql11_adapter_menu() {
  $items = array();
      $store_type = sparql11_adapter_wisski_get_store_type();
      $key = _sparql11_adapter_get_db_key();

    $items['admin/config/wisski/salz/add/' . $key] = array(
      'title' => 'Add new store of type ' . $store_type,
      'description' => 'Manage the storage backends',
      'type' => MENU_NORMAL_ITEM,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sparql11_adapter_wisski_add_form'),
      'access arguments' => array('administer wisski'),
    );

      $store_instances = sparql11_adapter_wisski_get_store_instances();
      
    foreach($store_instances as $key2 => $store_instance) {
        $items['admin/config/wisski/salz/edit/'.$key.'/'.$key2] = array(
        'title' => 'Edit ' . $store_type . ' Store ' . $store_instance->label,
        'description' => 'Manage the storage backends',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('sparql11_adapter_wisski_edit_form'),
        'access arguments' => array('administer wisski'),
        );

        $items['admin/config/wisski/salz/delete/' . $key . '/' .  $key2] = array(
        'title' => 'Delete Store ' . $store_type . ' ' . $key2,
        'description' => 'Manage the storage backends',
        'type' => MENU_NORMAL_ITEM,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('sparql11_adapter_wisski_delete_form'),
        'access arguments' => array('administer wisski'),
        );
      }
  return $items;
 }

/**
* implements hook_entity_info_alter()
*/
function sparql11_adapter_entity_info_alter(&$entity_info) {
  
/*
  $results = db_select('wisski_salz_sparql11_bundles','bundles')
              ->fields('bundles')
              ->execute()
              ->fetchAllAssoc('id');
  foreach($results as $result) {
    
  }
*/
}

function sparql11_adapter_wisski_get_store_settings() {
  $adapter = new SPARQL11Adapter();
  return $adapter->getSettings();
}

function sparql11_adapter_wisski_get_store() {
  $adapter = new SPARQL11Adapter();
  return $adapter;
}

  function sparql11_adapter_wisski_get_store_type() {
    return "SPARQL 1.1";
  }
  
  $sparql11_adapter_db_key = -1;
  
  function _sparql11_adapter_get_db_key() {
    global $sparql11_adapter_db_key;
    if ($sparql11_adapter_db_key == -1 || $sparql11_adapter_db_key == NULL) {
      $result = db_select('wisski_salz_store_types','types')
                                  ->fields('types',array('stid'))
                                  ->condition('label',sparql11_adapter_wisski_get_store_type(),'LIKE')
                                  ->execute()->fetchObject();
      if(!empty($result)) $sparql11_adapter_db_key = $result->stid;
    }
    return $sparql11_adapter_db_key;
  }

function sparql11_adapter_wisski_get_store_instances() {
  return db_select('wisski_salz_store_instances','ins')->fields('ins')->condition('deleted',0,'=')->condition('type',_sparql11_adapter_get_db_key(),'=')->execute()->fetchAllAssoc('name');
}

function sparql11_adapter_initialize_instance(&$instance, $id) {
    drupal_set_message(serialize($instance));
    $settingnames = array("query_endpoint" => "sparql11_query_endpoint_" . $id, "update_endpoint" => "sparql11_update_endpoint_" . $id, "local_data" => "sparql11_local_data_" . $id);
    foreach($settingnames as $key => $value) {
      $instance->setSettings($key, variable_get($value, ""));
    }
}

function sparql11_adapter_wisski_delete_store_instances($instance_to_delete = NULL){
  if ($instance_to_delete == NULL) $instance_to_delete = arg(6);
  $result = db_select('wisski_salz_store_instances','ins')->fields('ins')->condition('deleted',0,'=')->condition('name',$instance_to_delete,'LIKE')->execute();
  if (empty($result)) drupal_set_message("Instance $instance_to_delete does not exist or has already been deleted");
  else {
    db_update('wisski_salz_store_instances')->fields(array('deleted' => 1))->condition('name',$instance_to_delete,'LIKE')->execute();
    return TRUE;
  }
  return FALSE;
}

function sparql11_adapter_wisski_set_store_instances($instances){
  variable_set('sparql11_adapter_wisski_instances', $instances);
}

function sparql11_adapter_wisski_settings_page($store_instance_name = "",$clean) {
  if (!$clean) {
    try {
      $instance = sparql11_adapter_wisski_db_get_instance_by_name($store_instance_name);
    } catch (Exception $ex) {
      drupal_set_message("There was an error loading store instance $store_instance_name<br>Error Message: ".$ex->getMessage());
      $clean = TRUE;
    }
  }

  $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#default_value' => ($clean ? '' : $instance->label),
    );

  $form['query_endpoint'] = array(
      '#type' => 'textfield',
      '#title' => t('Query Endpoint'),
      '#default_value' => ($clean ? '' : $instance->query_endpoint),
    );

  $form['update_endpoint'] = array(
      '#type' => 'textfield',
      '#title' => t('Update Endpoint'),
      '#default_value' => ($clean ? '' : $instance->update_endpoint),
    );

  $form['local_data'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use this store as local store'),
      '#default_value' => ($clean ? '' : $instance->local_data),
      '#element_validate' => array('sparql11_adapter_wisski_settings_page_validate'),
    );

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#submit' => array('sparql11_adapter_wisski_form_submit'),
      '#weight' => 20,
    );

  if (!$clean) {//load button, delete link and loaded ontologies are only shown for existing stores
    $form['load_classes'] = array(
      '#type' => 'submit',
      '#value' => t('Load Classes'),
      '#submit' => array('sparql11_adapter_wisski_load_entities_and_fields'),
      '#weight' => 21,
    );
    
    $form['load_ind'] = array(
      '#type' => 'submit',
      '#value' => t('Load Individuals'),
      '#submit' => array('sparql11_adapter_wisski_load_individuals'),
      '#weight' => 22,
    );
  
    $form['clear'] = array(
      '#type' => 'submit',
      '#value' => t('Remove all Fields'),
      '#submit' => array('sparql11_adapter_remove_all_fields'),
      '#weight' => 23,
    );
  $installed_store_instances = sparql11_adapter_wisski_get_store_instances();

	$form['actions']['delete'] = array(
		'#type' => 'submit',
		'#value' => t('Delete this store'),
		'#submit' => array('sparql11_adapter_wisski_submit_delete_form'),
		'#weight' => 22,
	);


  $link = array(
    'data' => l('Delete store  SPARQL 1.1' . arg(6), 'admin/config/wisski/salz/delete/' . arg(5) . '/' . arg(6))
  );

  $form['delete'] = array(
    'link' => array(
      '#theme' => 'item_list',
      '#items' => $link,
    ),
    '#weight' => 24,
  );

  $ontologies_loaded = db_select('wisski_salz_ontologies','ont')
                        ->fields('ont',array('oid','iri'))
                        ->condition('sid',$instance->sid,'=')
                        ->condition('added',1,'=')
                        ->execute()->fetchAllAssoc('oid');
    if(!empty($ontologies_loaded)) {
    $form['ontologies_loaded'] = array(
      '#type' => 'fieldset',
      '#title' => t('Loaded ontologies').' ('.count($ontologies_loaded).')',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 10,
    );
      foreach ($ontologies_loaded as $ont) {
        $form['ontologies_loaded'][$ont->oid] = array(
          '#type' => 'item',
          '#markup' => $ont->iri,
        );
      }
    }
  } //if not clean
  return $form;
}

function sparql11_adapter_wisski_settings_page_validate($element, $form, &$form_state) {
    $local_store = $element['#value'];
    //drupal_set_message("local store = " . serialize($local_store));
    $result = wisski_salz_get_local_store();
    //drupal_set_message("\$result = " . serialize($result));
    
    // if $result contains one stdClass Object (which means that it is not numeric), i. e. one local store already exists in $result
    if(!is_numeric($result)){
	// and if one wants to set one more local store
    	if(!empty($local_store)){
	// then output the following error message
	form_error($element, t('You have already chosen a local store. You cannot have multiple local stores!'));
	}
    }
}

/**
* Fetches adapter info from database and invokes a SPARQL11Adapter instance with those settings
* we assume the instance to be unique in the DB
* @param $name the name of the instance to invoke
* @return an instance of SPARQL11Adapter
* @author domerz
*/
function sparql11_adapter_invoke_instance($name) {
  $store_instance = new SPARQL11Adapter();
  $settings = db_select('wisski_salz_store_instances','ins')
                ->fields('ins')
                ->condition('name',$name,'LIKE')
                ->execute()->fetchAssoc();
  $store_instance->setSettings($settings);
  return $store_instance;
}

function sparql11_adapter_wisski_load_individuals(){
  
  sparql11_adapter_invoke_instance(arg(6))->loadIndividuals();
  menu_rebuild();
}

function sparql11_adapter_wisski_load_entities_and_fields() {
  
  sparql11_adapter_invoke_instance(arg(6))->loadClasses();
  menu_rebuild();
}

function sparql11_adapter_wisski_form_submit($form, &$form_state, $store_instance = NULL){
  if(arg(4)=="add"){
    //drupal_set_message("ARG(4) IST " . arg(4));
    $installed_store_instances = sparql11_adapter_wisski_get_store_instances();
    //drupal_set_message("\$store_instances: " . serialize($installed_store_instances));
    menu_rebuild();

    foreach($installed_store_instances as $key => $installed_store_instance) {
      $form_state['redirect'] = 'admin/config/wisski/salz/' . arg(5) . '/' . $key;
      //drupal_set_message("\$key: " . serialize($key));
    }
    $label = $form_state['values']['name'];
    $name = preg_replace('/[^a-z0-9_]/u','',strtolower($label));
    $settings = array(
      'name' => $name,
      'label' => $label,
      'query_endpoint' => $form_state['values']['query_endpoint'],
      'update_endpoint' => $form_state['values']['update_endpoint'],
      'local_data' => $form_state['values']['local_data'],
    );
    sparql11_adapter_db_insert_settings($settings);
  }
else {
    //drupal_set_message("ARG(4) IST im else " . arg(4));
    //drupal_set_message("ARG(4) ist nicht add, sondern " . arg(4));
    $form_state['redirect'] = 'admin/config/wisski/salz/' . arg(4) . '/' . arg(5);
    $label = $form_state['values']['name'];
    $name = preg_replace('/[^a-z0-9_]/u','',strtolower($label));
    $settings = array(
      'old_name' => arg(6),
      'name' => $name,
      'label' => $label,
      'query_endpoint' => $form_state['values']['query_endpoint'],
      'update_endpoint' => $form_state['values']['update_endpoint'],
      'local_data' => $form_state['values']['local_data'],
    );
    sparql11_adapter_db_insert_settings($settings,FALSE);
  }
  menu_rebuild();
}

function sparql11_adapter_db_insert_settings($settings,$clean = TRUE) {
  if ($clean) {  
    $settings['type'] = _sparql11_adapter_get_db_key();
    db_insert('wisski_salz_store_instances')->fields($settings)->execute();
  } else {
    $old_name = $settings['old_name'];
    unset($settings['old_name']);
    db_update('wisski_salz_store_instances')->fields($settings)->condition('name',$old_name,'LIKE')->execute();
  }                                                         
}

function sparql11_adapter_wisski_db_get_instance_by_name($name) {
  return db_select('wisski_salz_store_instances','s')->fields('s')->condition('name',$name,'LIKE')->execute()->fetchObject();
}

function sparql11_adapter_wisski_add_form($form, &$form_state) {
  return sparql11_adapter_wisski_settings_page(arg(6),TRUE);
}

function sparql11_adapter_wisski_edit_form($form, &$form_state) {
  return sparql11_adapter_wisski_settings_page(arg(6),FALSE);
}

/**
* Store form "Delete" submit handler.
* @author Kerstin Reinfandt
*/
function sparql11_adapter_wisski_submit_delete_form($form, &$form_state){
	// Redirect user to "delete" uri for this store.
	$form_state['redirect'] = 'admin/config/wisski/salz/delete/' . arg(5) . '/' . arg(6);
}

/**
* Form constructor for the store delete confirmation form.
* @return array
*  Confirmation form.
* @author Kerstin Reinfandt
*/
function sparql11_adapter_wisski_delete_form($form, &$form_state){  
	// Show confirm dialog.
	$message = t('Are you sure you want to delete store SPARQL 1.1 ' . arg(6) . '?');
	$path = 'admin/config/wisski/salz/edit/' . arg(5) . '/' . arg(6);
	return confirm_form(
		$form,
		$message,
		$path,
		t('Only do this if you are sure!'),
		t('Delete'),
		t('Cancel')
	); 
}

/**
* Store "Confirm delete" form submit handler.
* @author Kerstin Reinfandt
*/
function sparql11_adapter_wisski_delete_form_submit($form, &$form_state){  
  $result = sparql11_adapter_wisski_delete_store_instances();
  menu_rebuild();
  if ($result) {
	drupal_set_message("The store SPARQL 1.1 " . arg(6) . " was successfully deleted.");
  }
  $form_state['redirect'] = 'admin/config/wisski/salz';
}