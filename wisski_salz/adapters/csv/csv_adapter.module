<?php
// $ID$

module_load_include('php', 'wisski_salz', "adapters/csv/CSVAdapter");
module_load_include('php', 'wisski_salz', "interface/AdapterInterface");

/**
* implements hook_menu()
*/
function csv_adapter_menu(){
    $items = array();
    $store_type = csv_adapter_wisski_get_store_type();
//    $key = _csv_adapter_get_db_key();

    $result = db_select('wisski_salz_store_types', 'types')
    ->fields('types', array('name'))
    ->condition('label', csv_adapter_wisski_get_store_type(), 'LIKE')
    ->execute()->fetchObject();
    if(!empty($result)) $store_type_name = $result->name;

    //$items['admin/config/wisski/salz/add/' . $key] = array(
    $items['admin/config/wisski/salz/add/' . $store_type_name] = array(
      'title' => 'Add new store of type ' . $store_type,
      'description' => 'Manage the storage backends',
      'type' => MENU_NORMAL_ITEM,
//      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('csv_adapter_add_form'),
      'access arguments' => array('administer wisski'),
    ); 

    $store_instances = csv_adapter_wisski_get_store_instances();
    foreach($store_instances as $key => $store_instance) {
	    $items['admin/config/wisski/salz/edit/' . $store_type_name . '/' . $store_instance->name] = array(
		    'title' => 'Edit ' . $store_type . ' Store ' . $store_instance->label,
		    'description' => 'Manage the storage backends',
		    'type' => MENU_LOCAL_TASK,
		    //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
		    'page callback' => 'drupal_get_form',
		    'page arguments' => array('csv_adapter_edit_form'),
		    'access arguments' => array('administer wisski'),
            );   
	    $items['admin/config/wisski/salz/delete/' . $store_type_name . '/' . $store_instance->name] = array(
		    'title' => 'Delete Store ' . $store_type . ' ' . $store_instance->label,
		    'description' => 'Manage the storage backends',
		    'type' => MENU_NORMAL_ITEM,
		    //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
		    'page callback' => 'drupal_get_form',
		    'page arguments' => array('wisski_salz_delete_form'),
		    'access arguments' => array('administer wisski'),
            );   
    } 

    return $items; 
}


function csv_adapter_wisski_get_store_settings(){
    $adapter = new CSVAdapter();
    return $adapter->getSettings();
}

function csv_adapter_wisski_get_store(){
    $adapter = new CSVAdapter();
    return $adapter;
}

function csv_adapter_wisski_get_store_type(){
    return "CSV";
}

function csv_adapter_invoke_instance($name){
	$store_instance = new CSVAdapter();
//	$store_instance = new CSVAdapter('file', $file);
	$settings = db_select('wisski_salz_store_instances', 'ins')
		->fields('ins')
		->condition('name', $name, 'LIKE')
		->execute()->fetchAssoc();
	$store_instance->setSettings($settings);
	return $store_instance;
}

function csv_adapter_wisski_get_store_instances(){
	return db_select('wisski_salz_store_instances', 'ins')
		->fields('ins')
		->condition('deleted', 0, '=')
		->condition('type', _csv_adapter_get_db_key(), '=')
		->execute()->fetchAllAssoc('name');
	    
}

    $csv_adapter_db_key = -1;

function _csv_adapter_get_db_key(){
	global $csv_adapter_db_key;
	if ($csv_adapter_db_key == -1 || $csv_adapter_db_key == NULL){
		$result = db_select('wisski_salz_store_types', 'types')
			->fields('types', array('stid'))
			->condition('label', csv_adapter_wisski_get_store_type(), 'LIKE')
			->execute()->fetchObject();
		if(!empty($result)) $csv_adapter_db_key = $result->stid;
	}
	return $csv_adapter_db_key;
}

function csv_adapter_db_insert_settings($settings, $clean = TRUE){
	$new_settings = array();
	if ($clean){
		foreach(array('name', 'label') as $key){
			$new_settings[$key] = $settings[$key];
			unset($settings[$key]);
		
		}
	} else {
	       foreach(array('name', 'label', 'old_name') as $key){
			$new_settings[$key] = $settings[$key];
			unset($settings[$key]);
		}
	}
	$new_settings['settings'] = serialize($settings);
	//drupal_set_message("new_settings = " . serialize($new_settings));
	$settings = $new_settings;
	//drupal_set_message("inserted new_settings = " . serialize($new_settings));
	//drupal_set_message("inserted settings = " . serialize($settings));

	if ($clean) {
		$settings['type'] = _csv_adapter_get_db_key();
		db_insert('wisski_salz_store_instances')
			->fields($settings)->execute();
	} else {
		$old_name = $settings['old_name'];
		unset($settings['old_name']);
		db_update('wisski_salz_store_instances')
			->fields($settings)->condition('name', $old_name, 'LIKE')->execute();
	}
}

function csv_adapter_settings_page($store_instance_name = "", $clean){
	$settings = array();
	if (!$clean){
	    try {
		    $instance = wisski_salz_db_get_instance_by_name($store_instance_name);
		    $settings = unserialize($instance->settings);
	    } catch(Exception $ex){
		    drupal_set_message("There was an error loading store_instance $store_instance_name<br>Error Message: " . $ex->getMessage());
		    $clean = TRUE;
	    }
}
    $form['name'] = array(
        '#type' => 'textfield',
	'#title' => t('Name'),
	'#default_value' => ($clean ? '' : $instance->label),
        '#description' => t('The human-readable name of the store.'),	
    );
    
     $form['file_path'] = array(
        '#type' => 'textfield',
	'#title' => t('File Path'),
	'#default_value' => ($clean ? '' : $settings['file_path']),
        '#description' => t('The path to the CSV File.'),	
    );    
    
     $form['separators'] = array(
        '#type' => 'textfield',
	'#title' => t('Separators'),
	'#default_value' => ($clean ? '' : $settings['separators']),
	'#description' => t('A group of characters that are separating the entries of the file.'),
        '#element_validate' => array('csv_adapter_separators_form_validate'),
    );
    
     $form['allowed_chars'] = array(
        '#type' => 'textfield',
	'#title' => t('Allowed Chars'),
	'#default_value' => ($clean ? '' : $settings['allowed_chars']),
        '#description' => t('A group of allowed characters.'),	
        '#element_validate' => array('csv_adapter_allowed_chars_form_validate'),
    );
    
    $form['delimiters'] = array(
        '#type' => 'textfield',
	'#title' => t('Delimiters'),
	'#default_value' => ($clean ? '' : $settings['delimiters']),
        '#description' => t('Pairs of surrounding delimiters of strings.'),	
        '#element_validate' => array('csv_adapter_delimiters_form_validate'),
    );
    
    $form['name_key'] = array(
        '#type' => 'textfield',
	'#title' => t('Name Key'),
	'#default_value' => ($clean ? '' : $settings['name_key']),
        '#description' => t('The name or column number of the (human-readable) unique key that identifies the row.'),	
    );

    $form['headline'] = array(
        '#type' => 'checkbox',
	'#title' => t('The file contains a headline'),
	'#default_value' => ($clean ? '' : $settings['headline']),
       // '#description' => t('Checked if the file contains a headline.'),	
    );

  /*  $form['local_data'] = array(
        '#type' => 'checkbox',
	'#title' => t('Use this store as local store'),
	'#default_value' => ($clean ? '' : $instance->local_data),
       // '#description' => t('Checked if the file contains a headline.'),	
        '#element_validate' => array('wisski_salz_settings_page_validate'),
    );
   */
    $form['submit'] = array(
	    '#type' => 'submit',
	    '#value' => t('Save'),
	    '#submit' => array('csv_adapter_form_submit'),
	    '#weight' => 20,
    );

	if(!$clean){
            $form['actions']['delete'] = array(
                '#type' => 'submit',
		'#value' => t('Delete this store'),
		'#limit_validation_errors' => array(), // No validation.
		'#submit' => array('wisski_salz_submit_delete_form'),
		'#weight' => 22,		   
	   );
	}
return $form;
}

function csv_adapter_form_submit($form, &$form_state, $store_instance = NULL){
    if(arg(4)=="add"){
        $label = $form_state['values']['name'];
        $name = preg_replace('/[^a-z0-9_]/u' , '', strtolower($label));
        $settings = array(
	    'name' => $name,
	    'label' => $label,
	    'file_path' => $form_state['values']['file_path'],
	    'separators' => $form_state['values']['separators'],
	    'allowed_chars' => $form_state['values']['allowed_chars'],
	    'delimiters' => $form_state['values']['delimiters'],
	    'headline' => $form_state['values']['headline'],
	    'name_key' => $form_state['values']['name_key'],
//	    'local_data' => $form_state['values']['local_data'],
        );
        csv_adapter_db_insert_settings($settings);
        drupal_set_message("Saved settings.");
        $installed_store_instances = csv_adapter_wisski_get_store_instances();
        foreach($installed_store_instances as $key => $installed_store_instance){
            $form_state['redirect'] = 'admin/config/wisski/salz/edit/'. arg(5) . '/' . $installed_store_instance->name;
        }
        menu_rebuild();
    } else {
	    drupal_set_message("Changed settings.");
	    $form_state['redirect'] = 'admin/config/wisski/salz/';
	    $label = $form_state['values']['name'];
	    $name = preg_replace('/[^a-z0-9_]/u', '', strtolower($label));
	    $settings = array(
		    'old_name' => arg(6),
		    'name' => $name,
		    'label' => $label,
		    'file_path' => $form_state['values']['file_path'],
		    'separators' => $form_state['values']['separators'],
		    'allowed_chars' => $form_state['values']['allowed_chars'],
		    'delimiters' => $form_state['values']['delimiters'],
		    'headline' => $form_state['values']['headline'],
		    'name_key' => $form_state['values']['name_key'],
//		    'local_data' => $form_state['values']['local_data'],
	    );
	    csv_adapter_db_insert_settings($settings, FALSE);
    }
    menu_rebuild();
}

function csv_adapter_add_form($form, &$form_state){
    return csv_adapter_settings_page(arg(6), TRUE);
}

function csv_adapter_edit_form($form, &$form_state){
    return csv_adapter_settings_page(arg(6), FALSE);
}

function csv_adapter_separators_form_validate($element, $form, &$form_state){
    $char = $element['#value'];
   // $file_name = $form_state['values']['file_path'];
    $store_instance = csv_adapter_invoke_instance(arg(6));
    drupal_set_message("store_instance = " . serialize($store_instance));
    if($store_instance->addSeparators($char)==FALSE){
        form_set_error('separators', t('Allowed chars and separators must be different!'));
    }
}

function csv_adapter_allowed_chars_form_validate($element, $form, &$form_state){
    $char = $element['#value'];
    $store_instance = csv_adapter_invoke_instance(arg(6));
    drupal_set_message("store_instance = " . serialize($store_instance));
    if($store_instance->addAllowedChars($char)==FALSE){
        form_set_error('allowed_chars', t('Allowed chars and separators must be different!'));
    }
}

function csv_adapter_delimiters_form_validate($element, $form, &$form_state){
    $input = $element['#value'];
    $store_instance = csv_adapter_invoke_instance(arg(6));
    drupal_set_message("store_instance in delimiters = " . serialize($store_instance));
    if($store_instance->addDelimiters($input)==FALSE){
        form_set_error('delimiters', t('String delimiters and separators must be different!'));
    }
    
}


function csv_adapter_test() {
    
  $adapter = new CSVAdapter('file','sites/all/modules/wisski/wisski_salz/adapters/csv/testfile.txt');
  dpm($adapter); 
}


