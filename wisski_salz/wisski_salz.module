<?php
// $ID$

/**
* Basic module for the WissKI-Communication with Drupal 7
* Provides the Pathbuilder Interface
* Handles Basic mappings
*
*
* @author: Mark Fichtner, Martin Scholz
*
*/

/**
 * Implements hook_permission().
 */
function wisski_salz_permission() {
  return array(
    'administer wisski' => array(
      'title' => t('Administer WissKI modules'),
      'restrict access' => TRUE,
    ),
  );
}

//function wisski_salz_help() {
//	dpm(variable_get('sparql11_update_endpoint_3'));
//}

/**
 * Implements hook_menu().
 */
function wisski_salz_menu() {
  
  $items['admin/config/wisski'] = array(
    'title' => 'WissKI',
    'type' => MENU_NORMAL_ITEM,
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer wisski'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/wisski/salz'] = array(
      'title' => 'Manage Stores',
      'description' => 'Manage the storage backends',
      'type' => MENU_NORMAL_ITEM,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_salz_view_installed_store_instances'),
      'access arguments' => array('administer wisski'),
  );

  $items['admin/config/wisski/salz/navigate'] = array(
      'title' => 'View Store Instances',
      'description' => 'Manage the storage backends',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_salz_view_installed_store_instances'),
      'access arguments' => array('administer wisski'),
  );

  $items['admin/config/wisski/salz/add'] = array(
    'title' => 'Add Store',
    'description' => 'Manage the storage backends',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_salz_config_page'),
    'access arguments' => array('administer wisski'),
  );

return $items;
}



function wisski_salz_view_installed_store_instances($form, &$form_state) {
    wisski_salz_set_store_types();	
    $store_types = wisski_salz_get_store_types();
    $store_instances = wisski_salz_get_installed_store_instances();
    // drupal_set_message("Store Instances = " . serialize($store_instances));
    //  $key = _sparql11_adapter_get_db_key();
    
    $link = array();
    foreach($store_types as $key => $store_type){
	    $link[$store_type['name']] = array(
		    'data' => l('Add new Store Instance of Type ' . $store_type['label'], 'admin/config/wisski/salz/add/' . $store_type['name']));
    }
    //  $form = array();
    $sorted_store_instances_by_type = array();
    
    // header for table structure
    $header = array(
	    'store_instance_name' => t('Store Instance Name'),
	    'store_type' => t('Store Type'),
	    'settings' => t('Settings'),
    );
    // content of table
    $options = array();

    foreach ($store_instances as $key2 => $store_instance){
	    $store_instance_settings = unserialize($store_instance->settings);
	    $local_store = wisski_salz_get_local_store();
	    if(!is_numeric($local_store) && $local_store->name == $store_instance->name){
		    $text = $local_store->label . " => LOCAL STORE";
	    } else {
		    $text = $store_instance->label;	    
	    }
	    $result = db_select('wisski_salz_store_types', 'types')
	        ->fields('types', array('name', 'label'))
	        ->condition('stid', $store_instance->type, 'LIKE')
	        ->execute()->fetchObject();
	    if(!empty($result)) $store_type_name = $result->name;
	    if(!empty($result)) $store_type_label = $result->label;
	    //$text = $store_instance->label;
	    $path = 'admin/config/wisski/salz/edit/' . $store_type_name . '/' . $store_instance->name;
	    if ($store_type_label == sparql11_adapter_wisski_get_store_type()){
		   /* $bla1 = array(
		       '#type' => 'checkbox',
		       '#title' => t('Test'),
	            );    
		    $bla = array(
			   'data' => l($text, $path). "<div class='wki_grey'>" . t($store_instance_settings['query_endpoint'] . ', ' . $store_instance_settings['update_endpoint']) . "</div>" . drupal_render($bla1),
                    );      
                    $sorted_store_instances_by_type[$store_instance->type][] = $bla;
	    }      */
		    
		    $options[$key2] = array(
			    'store_instance_name' => array(
				    'data' => array(
					    '#type' => 'link',
					    '#title' => $text,
					    '#href' => $path,
					   // '#options' => $l_options,
				    ),
			    ),
			    'store_type' => $store_type_label,
			    'settings' => "<div class='wki_grey'>" . t($store_instance_settings['query_endpoint'] . ', ' . $store_instance_settings['update_endpoint']) . "</div>",
		    );  
            }



            if ($store_type_label == csv_adapter_wisski_get_store_type()){   
                   /* $sorted_store_instances_by_type[$store_instance->type][] = array( 
                           'data' => l($text, $path). "<div class='wki_grey'>" . t($store_instance_settings['file_path']) . "</div>" ,
		   );*/  
		    $options[$key2] = array(
			    'store_instance_name' => array(
				    'data' => array(
					    '#type' => 'link',
					    '#title' => $text,
					    '#href' => $path,
				    ),
			    ),
			    'store_type' => $store_type_label,
			    'settings' => "<div class='wki_grey'>" . t($store_instance_settings['file_path']) . "</div>" ,
		    );
            }
  }

    $form = array();
    $form['add_link'] = array(
      'link' => array(
          '#theme' => 'item_list',
          '#items' => $link,
          '#title' => t('Add new Store'),
      ),
    );
    
    $form['set_local_store'] = array(
            '#type' => 'submit',
            '#value' => t('Set selected local store'),
            '#submit' => array('wisski_salz_set_local_store'),
	    '#prefix' => '<br> <br>',
	   // '#suffix' => '<br>',
    );
    $form['unset_local_store'] = array(
            '#type' => 'submit',
            '#value' => t('Unset selected local store'),
            '#submit' => array('wisski_salz_unset_local_store'),
	   // '#prefix' => '<br> <br>',
	   // '#suffix' => '<br>',
    );
  
    $form['table'] = array(
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $options,
      '#empty' => t('No stores found'),
      '#multiple' => FALSE,
      '#prefix' => '<br>',
      '#suffix' => '<br>',
    );   
/*
    foreach($sorted_store_instances_by_type as $key => $value) {
     drupal_set_message("sorted store instances = " . serialize($sorted_store_instances_by_type));
     drupal_set_message("key = " . serialize($key));
     drupal_set_message("value = " . serialize($value));
        $store_type_string = $store_types[$key]['label'];
          $form[$key] = array(
            'list' => array(
                  '#theme' => 'item_list',
                  '#items' => $value,
                  '#title' => t($store_type_string),
	  ),
  );
 */
  
     menu_rebuild();
     $form['recover'] = array(
            '#type' => 'submit',
            '#value' => t('Recover all deleted stores'),
            '#submit' => array('wisski_salz_recover_deleted_stores'),
     );
  
    return $form;
}

function wisski_salz_config_page() {
  wisski_salz_set_store_types();
  $store_types = wisski_salz_get_store_types();
  $items = array();
  foreach($store_types as $key => $store_type) {
     $items[] = array(
     //'data' => l($store_type['label'], 'admin/config/wisski/salz/add/' . $key),
     'data' => l($store_type['label'], 'admin/config/wisski/salz/add/' . $store_type['name']),
    );
  }
  return array(
    'list' => array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#title' => t('Choose type of store to add.'),
    ),
  );
}

function wisski_salz_set_local_store($form, &$form_state){
    $local_store = $form_state['values']['table'];
    $result_local = db_select('wisski_salz_store_instances','ins')->fields('ins')->condition('local_data',0,'=')->condition('name',$local_store,'LIKE')->execute();
    $result_others = db_select('wisski_salz_store_instances','ins')->fields('ins')->condition('local_data',1,'=')->condition('name',$local_store,'NOT LIKE')->execute();
    if (empty($result_local)) drupal_set_message("Instance $local_store does not exist"); 
        else {
                // if another local store is already set 
		if (!empty($result_others)){
			// unset the old local store in database
			db_update('wisski_salz_store_instances')->fields(array('local_data' => 0))->condition('name',$local_store,'NOT LIKE')->execute();
		}  
		// set the selected (new) local store
		db_update('wisski_salz_store_instances')->fields(array('local_data' => 1))->condition('name',$local_store,'LIKE')->execute();
		return TRUE;	
	    }  
}
    
function wisski_salz_unset_local_store($form, &$form_state){
    $local_store_to_unset = $form_state['values']['table'];
    $result = db_select('wisski_salz_store_instances','ins')->fields('ins')->condition('local_data',1,'=')->condition('name',$local_store_to_unset,'LIKE')->execute();
    if (empty($result)) drupal_set_message("Instance $local_store_to_unset does not exist"); 
    else {
		db_update('wisski_salz_store_instances')->fields(array('local_data' => 0))->condition('name',$local_store_to_unset,'LIKE')->execute();
    }
	
}

/**
 * Implementation of hook_wisski_salz_get_store_settings().
 *
 */
function wisski_salz_get_store_settings() {
  $stores = array();
  $stores = module_invoke_all('wisski_get_store_settings');
  return $stores;
}

/**
 * Implements hook_wisski_salz_get_stores().
 */
function wisski_salz_get_stores() {
  $stores = array();
  $stores = module_invoke_all('wisski_get_store');
  return $stores;
}

function wisski_salz_pb_query($individual_uri,$starting_concept,$path_array,$datatype_property) {
  
  $store = wisski_salz_invoke_local_store();
  if ($store->getType() == "SPARQL 1.1") return $store->pbQuery($individual_uri,$starting_concept,$path_array,$datatype_property);
  return array();
}

function wisski_salz_pb_update($individual_uri,$starting_concept,$path_array,$datatype_property,$new_data,$delete_old = FALSE) {
  
  $store = wisski_salz_invoke_local_store();
  if ($store->getType() == "SPARQL 1.1") return $store->pbUpdate($individual_uri,$starting_concept,$path_array,$datatype_property,$new_data,$delete_old);
  return array();
}

function wisski_salz_pb_make_uri($class,$name_part = '',$checked = TRUE) {

  //we take the class uri to retrieve the correct namespace prefix
  $store = wisski_salz_invoke_local_store();
  if ($store->getType() == "SPARQL 1.1") return $store->createNewIndividual($class,$name_part,$checked);
  return '';
}

function wisski_salz_pb_insert_individual($entity_uri,$bundle_uri) {
  
  $store = wisski_salz_invoke_local_store();
  if ($store->getType() == "SPARQL 1.1") return $store->insertIndividual($entity_uri,$bundle_uri);
  return FALSE;
}

function wisski_salz_pb_delete_entity_data($entity_uri) {

  $store = wisski_salz_invoke_local_store();
  if ($store->getType() == "SPARQL 1.1") return $store->createDeleteAllTriples($entity_uri);
  return FALSE;;
}

function wisski_salz_get_local_store() {
    drupal_static_reset('wisski_salz_local_store_instance');
    $result = db_select('wisski_salz_store_instances','ins')
    ->fields('ins')
    ->condition('local_data',1,'=')
    ->condition('deleted',0,'=')
    ->execute()
    ->fetchAllAssoc('name');
    $count = count($result);
//    drupal_set_message("\$count = $count");
    switch($count){
    	case 0: return $count;
    	case 1: return current($result);
    	default: return $count;
    }
    return $count;	 
  }

function wisski_salz_invoke_local_store($timestamp = NULL) {
    $instance = &drupal_static('wisski_salz_local_store_instance');
    if (isset($instance)) return $instance;
    $result = db_select('wisski_salz_store_instances','ins')
                ->fields('ins')
                ->condition('local_data',1,'=')
                ->condition('deleted',0,'=');
    if ($timestamp != NULL) {
      $delta = time() - $timestamp;
      $result = $result->condition('update_interval',$delta,'<');
    }
    $result = $result->execute()->fetchAssoc();
    if (!empty($result)) {
      $type = $result['type'];
      $module = db_select('wisski_salz_store_types','types')
                  ->fields('types')
                  ->condition('stid',$type,'=')
                  ->execute()
                  ->fetchAssoc();
      $instance = call_user_func($module['module'].'_invoke_instance',$result['name']);
      return $instance;
    }
    else return NULL;
  }

function wisski_salz_next_steps($node) {

  $local_store = wisski_salz_invoke_local_store();
  return $local_store->nextSteps($node);
}

function wisski_salz_next_datatype_properties($class) {

  $local_store = wisski_salz_invoke_local_store();
  return $local_store->nextDatatypeProperties($class);
}

function wisski_salz_recover_deleted_stores() {
  db_update('wisski_salz_store_instances')->fields(array('deleted' => 0))->condition('deleted',1,'=')->execute();
  menu_rebuild();
}

function wisski_salz_set_store_types() {
  $store_types = array();
  // take all store_types found from hook
  $modules = module_implements('wisski_get_store_type');
  $database_store_types = db_select('wisski_salz_store_types','t')->fields('t')->execute()->fetchAllAssoc('label');
  foreach($modules as $module){
    $store_type = call_user_func($module.'_wisski_get_store_type');
    if (!array_key_exists($store_type,$database_store_types)) {
      $settings = array(
        'name' => preg_replace('/[^a-z0-9_]/u','',strtolower($store_type)),
        'label' => $store_type,
        'module' => $module,
      );
      db_insert('wisski_salz_store_types')->fields($settings)->execute();
    }
  }
  drupal_set_message("Performed store type setting");
}

/**
 * Implements hook_wisski_salz_get_store_types().
 */
function wisski_salz_get_store_types() {
  $database_store_types = db_select('wisski_salz_store_types','t')->fields('t')->execute()->fetchAllAssoc('name');
//  dpm($database_store_types);
  $output_store_types = array();
  foreach($database_store_types as $store_type) {
    $settings = array(
      'name' => $store_type->name,
      'label' => $store_type->label,
    );
    $output_store_types[$store_type->stid] = $settings;
  }
  return $output_store_types;
}

function wisski_salz_get_installed_store_instances() {
  return db_select('wisski_salz_store_instances','ins')->fields('ins')->condition('deleted',0,'=')->execute()->fetchAllAssoc('name');
}

function wisski_salz_delete_store_instances($instance_to_delete = NULL){
    if ($instance_to_delete == NULL) $instance_to_delete = arg(6);
    $result = db_select('wisski_salz_store_instances','ins')->fields('ins')->condition('deleted',0,'=')->condition('name',$instance_to_delete,'LIKE')->execute();
    if (empty($result)) drupal_set_message("Instance $instance_to_delete does not exist or has already been deleted");
        else {
            db_update('wisski_salz_store_instances')->fields(array('deleted' => 1))->condition('name',$instance_to_delete,'LIKE')->execute();
                return TRUE;
                  }
                    return FALSE;
                    }

function wisski_salz_db_get_instance_by_name($name) {
    return db_select('wisski_salz_store_instances','s')->fields('s')->condition('name',$name,'LIKE')->execute()->fetchObject();
}

/*function wisski_salz_settings_page_validate($element, $form, &$form_state) {
    $local_store = $element['#value'];
    $result = wisski_salz_get_local_store();
                
    // if $result contains one stdClass Object (which means that it is not numeric), i. e. one local store already exists in $result
    if(!is_numeric($result)){
        // and if one wants to set one more local store
        if(!empty($local_store)){
        // then output the following error message
            form_error($element, t('You have already chosen a local store. You cannot have multiple local stores!'));
        }
    }
}
 */


/**
* Store form "Delete" submit handler.
* @author Kerstin Reinfandt
*/
function wisski_salz_submit_delete_form($form, &$form_state){
    // Redirect user to "delete" uri for this store.
    $form_state['redirect'] = 'admin/config/wisski/salz/delete/' . arg(5) . '/' . arg(6);
}

/**
* Form constructor for the store delete confirmation form.
* @return array
*  Confirmation form.
* @author Kerstin Reinfandt
*/
function wisski_salz_delete_form($form, &$form_state){
    $message = t('Are you sure you want to delete store ' . arg(6) . '?');
    $path = 'admin/config/wisski/salz/edit/' . arg(5) . '/' . arg(6);
    return confirm_form(
        $form,
        $message,
        $path,
        t('Only do this if you are sure!'),
        t('Delete'),
        t('Cancel')
    );
}

/**
* Store "Confirm delete" form submit handler.
* @author Kerstin Reinfandt
*/
function wisski_salz_delete_form_submit($form, &$form_state){
    $result = wisski_salz_delete_store_instances();
    menu_rebuild();
    if ($result) {
        drupal_set_message("The store " . arg(6) . " was successfully deleted.");
    }
    $form_state['redirect'] = 'admin/config/wisski/salz';
}
            
function wisski_salz_store_modes(){
  $store_modes = array();
  $store_modes = module_invoke_all('wisski_get_store_mode');
}

