<?php
// $ID$

/**
* Basic module for the WissKI-Communication with Drupal 7
* Provides the Pathbuilder Interface
* Handles Basic mappings
*
*
* @author: Mark Fichtner, Martin Scholz
*
*/

/**
 * Implements hook_permission().
 */
function wisski_salz_permission() {
  return array(
    'administer wisski' => array(
      'title' => t('Administer WissKI modules'),
      'restrict access' => TRUE,
    ),
  );
}

//function wisski_salz_help() {
//	dpm(variable_get('sparql11_update_endpoint_3'));
//}

/**
 * Implements hook_menu().
 */
function wisski_salz_menu() {
  
  $items['admin/config/wisski'] = array(
    'title' => 'WissKI',
    'type' => MENU_NORMAL_ITEM,
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer wisski'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/wisski/salz'] = array(
      'title' => 'Manage Stores',
      'description' => 'Manage the storage backends',
      'type' => MENU_NORMAL_ITEM,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_salz_view_installed_store_instances'),
      'access arguments' => array('administer wisski'),
  );

  $items['admin/config/wisski/salz/navigate'] = array(
      'title' => 'View Store Instances',
      'description' => 'Manage the storage backends',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_salz_view_installed_store_instances'),
      'access arguments' => array('administer wisski'),
  );

/*  $items['admin/config/wisski/salz/add'] = array(
    'title' => 'Add Store',
    'description' => 'Manage the storage backends',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_salz_config_page'),
    'access arguments' => array('administer wisski'),
  );
 */
return $items;
}

function wisski_salz_get_local_store() {
  $result = db_select('wisski_salz_store_instances','ins')
    ->fields('ins')
    ->condition('local_data',1,'=')
    ->condition('deleted',0,'=')
    ->execute()
    ->fetchAllAssoc('name');
  $count = count($result);
  //drupal_set_message("\$count = $count");
    switch($count){
	case 0: return $count;
	case 1: return current($result);
	default: return $count;
}
  return $count;
}

function wisski_salz_view_installed_store_instances($form, &$form_state) {
  $store_types = wisski_salz_get_store_types();
  $store_instances = wisski_salz_get_installed_store_instances();
//  $key = _sparql11_adapter_get_db_key();
  $link = array();
 /* $link['any'] = array(
    'data' => l('Add new Store Instance', 'admin/config/wisski/salz/add'),
  );
  */
  foreach($store_types as $key => $store_type){
  $link[$store_type['name']] = array(
    'data' => l('Add new Store Instance of Type ' . $store_type['label'], 'admin/config/wisski/salz/add/' . $store_type['name']));
//    'data' => l('Add new Store Instance of Type ' . $store_type['label'], 'admin/config/wisski/salz/add/' . $key));
  }

  $sorted_store_instances_by_type = array();
  foreach ($store_instances as $key2 => $store_instance){
    $local_store = wisski_salz_get_local_store();
    if(!is_numeric($local_store) && $local_store->name == $store_instance->name){
	$text = $local_store->label . " => Local store";
	//$text = $store_instance->label . " => Local store";
    } else {
    $text = $store_instance->label;
    }
    $result = db_select('wisski_salz_store_types', 'types')
	  ->fields('types', array('name'))
	  ->condition('stid', $store_instance->type, 'LIKE')
	  ->execute()->fetchObject();
    if(!empty($result)) $store_type_name = $result->name;

    //$path = 'admin/config/wisski/salz/edit/' . $store_instance->type . '/' . $store_instance->name;
    $path = 'admin/config/wisski/salz/edit/' . $store_type_name . '/' . $store_instance->name;
    $sorted_store_instances_by_type[$store_instance->type][] = array( 
      'data' => l($text, $path). "<div class='wki_grey'>" . t($store_instance->query_endpoint . ', ' . $store_instance->update_endpoint) . "</div>",
    );
    
  }

  $form = array();
  $form['add_link'] = array(
    'link' => array(
      '#theme' => 'item_list',
      '#items' => $link,
      '#title' => t('Add new Store'),
    ),
  );

  foreach($sorted_store_instances_by_type as $key => $value) {
      $store_type_string = $store_types[$key]['label'];
      $form[$key] = array(
            'list' => array(
                  '#theme' => 'item_list',
                  '#items' => $value,
                  '#title' => t($store_type_string),
             ),
         );
    }

  menu_rebuild();
  $form['recover'] = array(
    '#type' => 'submit',
    '#value' => t('Recover all deleted stores'),
    '#submit' => array('wisski_salz_recover_deleted_stores'),
  );
  
  /*$form['get_local'] = array(
    '#type' => 'submit',
    '#value' => t('Show local store'),
    '#submit' => array('wisski_salz_get_local'),
  );*/

  return $form;
}

/*function wisski_salz_get_local() {
  $res = wisski_salz_get_local_store();
  if (!is_numeric($res)) {
	dpm($res);
	//return $res->label;
  }
  else if ($res == 0) {
	drupal_set_message("No local store has been set");
  }
}*/

function wisski_salz_config_page() {
  wisski_salz_set_store_types();
 $store_types = wisski_salz_get_store_types();
  $items = array();
  foreach($store_types as $key => $store_type) {
     $items[] = array(
     'data' => l($store_type['label'], 'admin/config/wisski/salz/add/' . $key),
    );
  }
  return array(
    'list' => array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#title' => t('Choose type of store to add.'),
    ),
  );
}

/**
 * Implementation of hook_wisski_salz_get_store_settings().
 *
 */
function wisski_salz_get_store_settings() {
  $stores = array();
  $stores = module_invoke_all('wisski_get_store_settings');
  return $stores;
}

/**
 * Implements hook_wisski_salz_get_stores().
 */
function wisski_salz_get_stores() {
  $stores = array();
  $stores = module_invoke_all('wisski_get_store');
  return $stores;
}

function wisski_salz_recover_deleted_stores() {
  db_update('wisski_salz_store_instances')->fields(array('deleted' => 0))->condition('deleted',1,'=')->execute();
  menu_rebuild();
}

function wisski_salz_set_store_types() {
  $store_types = array();
  // take all store_types found from hook
  $store_types = module_invoke_all('wisski_get_store_type');
  $database_store_types = db_select('wisski_salz_store_types','t')->fields('t')->execute()->fetchAllAssoc('label');
  foreach($store_types as $store_type){
    if (!array_key_exists($store_type,$database_store_types)) {
      $settings = array(
        'name' => preg_replace('/[^a-z0-9_]/u','',strtolower($store_type)),
        'label' => $store_type,
      );
      db_insert('wisski_salz_store_types')->fields($settings)->execute();
    }
  }
  drupal_set_message("Performed store type setting");
}

/**
 * Implements hook_wisski_salz_get_store_types().
 */
function wisski_salz_get_store_types() {
  $database_store_types = db_select('wisski_salz_store_types','t')->fields('t')->execute()->fetchAllAssoc('name');
//  dpm($database_store_types);
  $output_store_types = array();
  foreach($database_store_types as $store_type) {
    $settings = array(
      'name' => $store_type->name,
      'label' => $store_type->label,
    );
    $output_store_types[$store_type->stid] = $settings;
  }
  return $output_store_types;
}

function wisski_salz_get_installed_store_instances() {
  return db_select('wisski_salz_store_instances','ins')->fields('ins')->condition('deleted',0,'=')->execute()->fetchAllAssoc('name');
}

function wisski_salz_get_store_instances_by_type() {
  $installed_store_instances = array();
  $installed_store_instances = module_invoke_all('wisski_get_store_instances_by_type');
  return $installed_store_instances;
}

function wisski_salz_store_modes(){
  $store_modes = array();
  $store_modes = module_invoke_all('wisski_get_store_mode');
}
